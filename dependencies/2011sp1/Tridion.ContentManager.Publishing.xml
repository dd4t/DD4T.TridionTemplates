<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tridion.ContentManager.Publishing</name>
    </assembly>
    <members>
        <member name="T:Tridion.ContentManager.Publishing.ComWrapper.IPublishEngine">
            <summary>
            The COM interface for the <see cref="T:Tridion.ContentManager.Publishing.PublishEngine"/> implementation.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.IPublishEngine.PublishUsingUserName(System.String,System.String)">
            <summary>
            Creates Publish Transaction(s) to publish items based on the publish instruction.
            </summary>
            <param name="userName">Name of user who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.IPublishEngine.Publish(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String)">
            <summary>
            Creates Publish Transaction(s) to publish items based on the publish instruction.
            </summary>
            <param name="userContext">Information about who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.IPublishEngine.UnPublishUsingUserName(System.String,System.String)">
            <summary>
            Creates Publish Transaction(s) to un-publish based on the publish instruction.
            </summary>
            <param name="userName">Name of user who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.IPublishEngine.UnPublish(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String)">
            <summary>
            Creates Publish Transaction(s) to un-publish based on the publish instruction.
            </summary>
            <param name="userContext">Information about who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.IPublishEngine.SetPublishState(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets the published state on the item.
            </summary>
            <param name="userContext">Information about who performs the action.</param>
            <param name="itemId">The item on which the published state is set.</param>
            <param name="templateId">The optional template on which the published state is set.</param>
            <param name="publicationTargetId">The Publication Target to which the item is (un-)published.</param>
            <param name="publisherId">The user who (un-)published the item.</param>
            <param name="isPublished">Indicates if the item is published or un-published.</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade">
            <summary>
            Com facade from the <see cref="T:Tridion.ContentManager.Publishing.PublishEngine"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade.PublishUsingUserName(System.String,System.String)">
            <summary>
            Creates Publish Transaction(s) to publish items based on the publish instruction.
            </summary>
            <param name="userName">Name of user who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
            <remarks>Method is not part of the public API.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade.Publish(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String)">
            <summary>
            Creates Publish Transaction(s) to publish items based on the publish instruction.
            </summary>
            <param name="userContext">Information about who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
            <remarks>Method is not part of the public API.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade.UnPublishUsingUserName(System.String,System.String)">
            <summary>
            Creates Publish Transaction(s) to un-publish items based on the publish instruction.
            </summary>
            <param name="userName">Name of user who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
            <remarks>Method is not part of the public API.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade.UnPublish(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String)">
            <summary>
            Creates Publish Transaction(s) to un-publish items based on the publish instruction.
            </summary>
            <param name="userContext">Information about who performs the action.</param>
            <param name="publishInstruction">A publish instruction as defined in the system schema.</param>
            <returns>A PublishResponse as defined in the system schema.</returns>
            <remarks>Method is not part of the public API.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade.SetPublishState(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets the published state on the item.
            </summary>
            <param name="userContext">Information about who performs the action.</param>
            <param name="itemId">The item on which the published state is set.</param>
            <param name="templateId">The optional template on which the published state is set.</param>
            <param name="publicationTargetId">The Publication Target to which the item is (un-)published.</param>
            <param name="publisherId">The user who (un-)published the item.</param>
            <param name="isPublished">Indicates if the item is published or un-published.</param>
        </member>
        <member name="T:Tridion.ContentManager.Extensibility.Events.PublishEventArgs">
            <summary>
            Represents event data for events related to publishing an <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
            <seealso cref="M:Tridion.ContentManager.Publishing.PublishEngine.Publish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType},Tridion.ContentManager.Publishing.PublishPriority)"/>
        </member>
        <member name="T:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs">
            <summary>
            Abstract base class for event data for publish and un-publish events.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Extensibility.Events.PublishingEventArgs">
            <summary>
            Abstract base class for event data for events related to publishing.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Extensibility.Events.PublishingEventArgs"/> class. 
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.#ctor(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublishingTarget},Tridion.ContentManager.Publishing.PublishInstructionBase,System.Nullable{Tridion.ContentManager.Publishing.PublishPriority})">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs"/> class. 
            </summary>
            <param name="items">The items that are to be (un-)published.</param>
            <param name="targets">The targets to publish to or un-publish from.</param>
            <param name="instruction">The (un-)publish instruction.</param>
            <param name="priority">The priority used for queuing the (un-)publish request.</param>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.DeepCopy">
            <summary>
            Creates a deep copy of the event data which can be used for asynchronous events.
            </summary>
            <returns>
            A new <see cref="T:Tridion.ContentManager.Extensibility.TcmEventArgs"/>-derived instance which is a deep copy of this one.
            </returns>
            <remarks>
            Asynchronous events are executed on a different thread and should also be completely decoupled from the synchronous event chain.
            That is: asynchronous event handlers should not have the ability to change the event data used for the synchronous events.
            Since the asynchronous event handlers may be executed in parallel, the event data used for the asynchronous events is a deep copy.
            The default implementation performs a shallow copy, which is OK as long as the class only contains value type properties.
            Subclasses that add reference type properties must override this method to ensure the deep copy semantics.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.Equals(System.Object)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="obj">The object to compare this object against.</param>
            <returns><c>true</c> if the instances are of the same type and have the same property values.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            <returns>A string representation containing the type name and all property values.</returns>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.Items">
            <summary>
            Gets the items that are to be (un-)published.
            </summary>
            <remarks>
            The <code>PublishEngine.Publish</code> and <code>PublishEngine.UnPublish</code> methods can be called with multiple items.
            Eventually, these items will get published in one Publish Transaction (for now, separate Publish Transactions are created for each item).
            A separate Publish Event is raised for each item, but each event will have all items in its event data.
            This is a read only property allowing event handlers to see which items are part of the publish job.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.Targets">
            <summary>
            Gets or sets the targets to publish to or un-publish from.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.Priority">
            <summary>
            Gets or sets the priority used for queuing the (un-)publish request.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.PublishTransactions">
            <summary>
            Gets the publish transactions associated with this event.
            </summary>
            <remarks>
            Publish transactions are only available in post-events. In pre-events the collection will be empty.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.PublishOrUnPublishEventArgs.Instruction">
            <summary>
            Gets or sets the (un-)publish instruction.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.PublishEventArgs.#ctor(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublishingTarget},Tridion.ContentManager.Publishing.PublishInstruction,System.Nullable{Tridion.ContentManager.Publishing.PublishPriority})">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Extensibility.Events.PublishEventArgs"/> class. 
            </summary>
            <param name="items">The items that are to be published.</param>
            <param name="targets">The targets to publish to.</param>
            <param name="instruction">The publish instruction.</param>
            <param name="priority">The priority used for queuing the publish request.</param>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.PublishEventArgs.PublishInstruction">
            <summary>
            Gets or sets the publish instruction which specifies how resolving and rendering should occur.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs">
            <summary>
            Represents event data for events related to setting the publish state of an <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.#ctor(System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.ProcessedItem},Tridion.ContentManager.CommunicationManagement.PublicationTarget,System.Boolean,Tridion.ContentManager.Security.User)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs"/> class. 
            </summary>
            <param name="processedItems">The items for which the publish state should be updated.</param>
            <param name="target">The target to which the items have been published (or unpublished).</param>
            <param name="isPublished">Indicates whether the given items have been published or unpublished.</param>
            <param name="publisher">The person who performed the (un-)publish action.</param>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.DeepCopy">
            <summary>
            Creates a deep copy of the event data which can be used for asynchronous events.
            </summary>
            <returns>
            A new <see cref="T:Tridion.ContentManager.Extensibility.TcmEventArgs"/>-derived instance which is a deep copy of this one.
            </returns>
            <remarks>
            Asynchronous events are executed on a different thread and should also be completely decoupled from the synchronous event chain.
            That is: asynchronous event handlers should not have the ability to change the event data used for the synchronous events.
            Since the asynchronous event handlers may be executed in parallel, the event data used for the asynchronous events is a deep copy.
            The default implementation performs a shallow copy, which is OK as long as the class only contains value type properties.
            Subclasses that add reference type properties must override this method to ensure the deep copy semantics.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.Equals(System.Object)">
            <summary>
            Determines whether two instances are equal.
            </summary>
            <param name="obj">The object to compare this object against.</param>
            <returns><c>true</c> if the instances are of the same type and have the same property values.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            <returns>A string representation containing the type name and all property values.</returns>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.ProcessedItems">
            <summary>
            Gets the items for which the publish state should be updated.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.Target">
            <summary>
            Gets or sets the target to which the <see cref="P:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.ProcessedItems"/> have been published (or unpublished).
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.IsPublished">
            <summary>
            Gets a value indicating whether the given <see cref="P:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.ProcessedItems"/> have been published or unpublished.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.SetPublishStateEventArgs.Publisher">
            <summary>
            Gets or sets the person who performed the (un-)publish action.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Extensibility.Events.UnPublishEventArgs">
            <summary>
            Represents event data for events related to un-publishing an <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
            <seealso cref="M:Tridion.ContentManager.Publishing.PublishEngine.UnPublish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.UnPublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType},Tridion.ContentManager.Publishing.PublishPriority)"/>
        </member>
        <member name="M:Tridion.ContentManager.Extensibility.Events.UnPublishEventArgs.#ctor(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublishingTarget},Tridion.ContentManager.Publishing.UnPublishInstruction,System.Nullable{Tridion.ContentManager.Publishing.PublishPriority})">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Extensibility.Events.UnPublishEventArgs"/> class. 
            </summary>
            <param name="items">The items that are to be published.</param>
            <param name="targets">The targets to publish to.</param>
            <param name="instruction">The un-publish instruction.</param>
            <param name="priority">The priority used for queuing the publish request.</param>
        </member>
        <member name="P:Tridion.ContentManager.Extensibility.Events.UnPublishEventArgs.UnPublishInstruction">
            <summary>
            Gets or sets the un-publish instruction which specifies how resolving should occur.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherCacheLifetime">
            <summary>
            Defines the possible cache lifetime choices
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherCacheLifetime.RenderAction">
            <summary>Cache operates during rendering actions</summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherCacheLifetime.PublishTransaction">
            <summary>Cache operates during publishing transactions</summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration">
            <summary>
            Represents the resolving section within a configuration file.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.Mappings">
            <summary>
            Gets and sets the resolving mappings.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.Threading">
            <summary>
            Gets and sets the threading values.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.CacheLifetime">
            <summary>
            Gets or sets the cache lifetime.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.ForcedGCPolicy">
            <summary>
            Gets or sets the forced Garbage Collection policy.
            </summary>
            <remarks>
            For normal operation the default value of <see cref="F:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherForcedGCPolicy.NoForcedGC"/> should be used.
            The other settings can be used for analysing potential memory leaks: by forcing a Garbage Collection one can
            see whether CLR memory is really still in use, or the Garbage Collector just didn't bother to reclaim the memory.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.HeartbeatTimeout">
            <summary>
            Gets or sets the timeout for a Monitoring Heartbeat in seconds.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.IsLegacyPublishStateEventEnabled">
            <summary>
            Gets or sets a value indicating whether legacy publishing related events are enabled.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherConfiguration.SectionName">
            <summary>
            Use this section name to get the publisher configuration from the <see cref="T:System.Configuration.ConfigurationManager"/>
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherForcedGCPolicy">
            <summary>
            Defines the forced Garbage Collection policies than can be used by the publisher
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherForcedGCPolicy.NoForcedGC">
            <summary>No forced Garbage Collection. This setting should be used for normal operation.</summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherForcedGCPolicy.AfterPublishTransaction">
            <summary>Forced Garbage Collection after a Publish Transaction completed.</summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherForcedGCPolicy.AfterRenderAndPublishTransaction">
            <summary>Forced Garbage Collection after each Render action and after a Publish Transaction completed.</summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping">
            <summary>
            Represents a mapping between a class that derives from <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> 
            and its publish transaction handlers within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping.#ctor(Tridion.ContentManager.Publishing.PublishInstructionBase)">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> class.
            </summary>
            <param name="publishInstruction">Gets the type name from the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/>.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping.PublishInstructionType">
            <summary>
            Gets and sets the item type of the publisher mapping.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping.PublishTransactionHandlers">
            <summary>
            Gets the publish transaction handlers for the specified item type.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings">
            <summary>
            Represents a collection of mappings between an <see cref="T:Tridion.ContentManager.IdentifiableObject"/> and its publish transaction handlers within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/>.
            </summary>
            <returns>A new <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/>.
            </summary>
            <param name="element">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to get.</param>
            <returns>An Object that acts as the key for the specified ResourceElement.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.Add(Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to the publisher mappings collection.
            </summary>
            <param name="publisherMapping">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to a collection of <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings"/>.
            </summary>
            <param name="resource">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.Remove(Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping)">
            <summary>
            Removes a <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> from the collection.
            </summary>
            <param name="publisherMapping">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to remove.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> at the specified index location.
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to remove.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.CollectionType">
            <summary>
            Gets the type of the publisher mappings collection.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> at the specified index location. 
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> to get.</param>
            <returns>A <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherMapping"/> at the specified index.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherThreading">
            <summary>
            Specifies threading configuration settings for the Publisher service.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherThreading.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherThreading"/> class.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherThreading.RenderThreadCount">
            <summary>
            Gets and sets the number of threads for rendering.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublisherThreading.DeployThreadCount">
            <summary>
            Gets and sets the number of threads for deployment.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler">
            <summary>
            Represents a publish transaction handler within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler.#ctor">
            <summary>
            Creates a new instance of the <see cref="N:Tridion.ContentManager.Publishing.Publisher"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> class.
            </summary>
            <param name="type">The class name responsible for processing the publish transaction.</param>
            <param name="assembly">The name of the assembly.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler.Type">
            <summary>
            Gets and sets the type of the class responsible for processing the publish transaction.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler.Assembly">
            <summary>
            Gets and sets the assembly that contains the publish transaction handler.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers">
            <summary>
            Represents a collection of Publish Transaction handlers within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/>.
            </summary>
            <returns>A new <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/>.
            </summary>
            <param name="publishTransactionHandler">Get this <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/>.</param>
            <returns>An Object that acts as the key for the specified <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.Add(Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to a collection of <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers"/>.
            </summary>
            <param name="publishTransactionHandler">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to a collection of <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers"/>.
            </summary>
            <param name="publishTransactionHandler">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.Remove(Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler)">
            <summary>
            Removes a <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> from the collection of <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers"/>.
            </summary>
            <param name="publishTransactionHandler">The <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to remove.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> at the specified index location.
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to remove.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.CollectionType">
            <summary>
            Gets the type of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers"/> collection.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandlers.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> at the specified index location. 
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> to get.</param>
            <returns>A <see cref="T:Tridion.ContentManager.Publishing.Publisher.Configuration.PublishTransactionHandler"/> at the specified index.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishingListFilter">
            <summary>
            Abstract base class for filters on publishing related lists
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishingListFilter.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishingListFilter"/> class.
            </summary>
            <param name="businessObjectType">The Type of the business object (TOM.NET object).</param>
            <param name="xmlListMethodName">The name of the method in <see cref="T:Tridion.ContentManager.SystemManager"/> that returns a list as XML.</param>
            <param name="listMethodName">The name of the method in <see cref="T:Tridion.ContentManager.SystemManager"/> that returns a list as domain objects.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishingListFilter.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishingListFilter"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishingListFilter.#ctor(Tridion.ContentManager.Filter,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishingListFilter"/> class based on a copy of the given Filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishingListFilter.#ctor(Tridion.ContentManager.Data.Publishing.PublishingListFilterData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishingListFilter"/> class based on a copy of the given data object.
            </summary>
            <param name="filterData">The data object of the filter.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishingListFilter.GetManagerType">
            <summary>
            Gets the Type of class that contains the list method of this filter.
            </summary>
            <returns>
            Type of the class containing the list method.
            </returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter">
            <summary>
            A Filter that can be used to constrain a list of PublishTransactions.
            </summary>
            <remarks>
            User that has <see cref="F:Tridion.ContentManager.Security.Rights.PublishManagement"/> right in any publication can see Publish Transactions from all publications.
            </remarks>
            <exception cref="T:Tridion.ContentManager.AccessDeniedException">When user gets list of the Publication Transactions and user is not a System Administrator and doesn't have <see cref="F:Tridion.ContentManager.Security.Rights.PublishManagement"/> right in any publication.</exception>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransactionsFilter.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/> class.
            </summary>
            <param name="session">The session used to create business objects.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransactionsFilter.#ctor(Tridion.ContentManager.Filter,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/> class and copies the specified <see cref="T:Tridion.ContentManager.Filter"/>.
            </summary>
            <param name="filter">The <see cref="T:Tridion.ContentManager.Filter"/> to copy.</param>
            <param name="session">The session used to create business objects.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransactionsFilter.#ctor(Tridion.ContentManager.Data.Publishing.PublishTransactionsFilterData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/> class based on a given data object.
            </summary>
            <param name="data">The data object to be used as state of the new Filter instance.</param>
            <param name="session">The Session used to create business objects.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransactionsFilter.ValidateEnumProperties(Tridion.ContentManager.Data.Publishing.PublishTransactionsFilterData)">
            <summary>
            Called by the constructor or setters of enumeration properties.
            </summary>
            <param name="dataObject">A data object to validate (passed explicitly because it can also be not the current object state)</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransactionsFilter.GetDataObjectType">
            <summary>
            Gets the Filter data object type.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransactionsFilter.SetDefaultValues">
            <summary>
            Sets default values on <see cref="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.CurrentState"/> 
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.PublishTransactionState">
            <summary>
            Gets or sets a condition to include only Publish Transactions that have the specified PublishTransactionState as their <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.State"/>.
            </summary>
            <remarks>
            To get Publish Transactions in any state set this property value to <c>null</c>.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.Priority">
            <summary>
            Gets or sets a condition to include only Publish Transactions that have only the specified Priority.
            </summary>
            <remarks>
            To get Publish Transactions in any priority set this property value to <c>null</c>.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.StartDate">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.StartDate"/> condition to constrain the items returned by the list to this value.
            </summary>
            <remarks>
            If set, the filtered list will only contain Publish Transactions that were initiated or deployed or changed state on or after the specified date.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.EndDate">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.EndDate"/> condition to constrain the items returned by the list to this value.
            </summary>
            <remarks>
            If set, the filtered list will only contain Publish Transactions that were initiated or deployed or changed state before the specified date.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.ForRepository">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.ForRepository"/> condition to constrain the items returned by the list to this value.
            </summary>
            <remarks>
            When specified gets Publish Transactions that have the specified Repository in <see cref="P:Tridion.ContentManager.Publishing.PublishContext.Publication"/> property of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.PublicationTarget">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.PublicationTarget"/> condition to constrain the items returned by the list to this value.
            </summary>
            <remarks>
            When specified gets only those Publish Transactions published to specified Publication Target.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.PublishedBy">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.PublishedBy"/> condition to constrain the items returned by the list to this value.
            </summary>
            <remarks>
            When specified gets only those Publish Transaction initiated by the specified user.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransactionsFilter.CurrentState">
            <summary>
            Gets the filter's current state as a data object.
            </summary>
            <remarks>
            The property's type is refined to the appropriate data object type.
            </remarks>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.RenderContext">
            <summary>
            Contains information about rendering which can be used across renderers.
            For example if you you are rendering a <see cref="T:Tridion.ContentManager.CommunicationManagement.Page"/> and on that page you want to render a <see cref="T:Tridion.ContentManager.CommunicationManagement.ComponentPresentation"/>
            you can pass information to this renderer using this <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/>.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderContext.#ctor(Tridion.ContentManager.IdentifiableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> class using the specified <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
            <param name="contextItem">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> that is used within this <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/>.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Rendering.RenderContext.ContextItem">
            <summary>
            Gets and sets the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> that is used in this render context.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Rendering.RenderContext.ContextVariables">
            <summary>
            Gets the dictionary containing variables used in this context.
            </summary>
            <remarks>
            This dictionary can be used to transfer information between renderers.
            </remarks>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.StructureGroupRenderer">
            <exclude/>
            <summary>
            Renderer implementation for publishing <see cref="T:Tridion.ContentManager.CommunicationManagement.StructureGroup"/>.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.IRenderer">
            <summary>
            Defines the methods to resolve items.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.IRenderer.Render(Tridion.ContentManager.Publishing.Resolving.ResolvedItem,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Publishing.Rendering.RenderedItem,Tridion.ContentManager.Publishing.Rendering.RenderContext)">
            <summary>
            Renders the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> based on the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>
            </summary>
            <param name="resolvedItem">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to render.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>. The target can be null.</param>
            <param name="renderedItem">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> is modified with the result of the render action.</param>
            <param name="renderContext">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers. The renderContext can be null.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.StructureGroupRenderer.Render(Tridion.ContentManager.Publishing.Resolving.ResolvedItem,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Publishing.Rendering.RenderedItem,Tridion.ContentManager.Publishing.Rendering.RenderContext)">
            <summary>
            Renders a <see cref="T:Tridion.ContentManager.CommunicationManagement.StructureGroup"/> according to the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> as a structuregroup.
            </summary>
            <param name="resolvedItem">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> containing the <see cref="T:Tridion.ContentManager.CommunicationManagement.StructureGroup"/>.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <param name="renderedItem">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> is modified with the result of the render action.</param>
            <param name="renderContext">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers.</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.TaxonomyRenderer">
            <exclude/>
            <summary>
            Renderer implementation for publishing taxonomies.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TaxonomyRenderer.Render(Tridion.ContentManager.Publishing.Resolving.ResolvedItem,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Publishing.Rendering.RenderedItem,Tridion.ContentManager.Publishing.Rendering.RenderContext)">
            <summary>
            Renders a <see cref="T:Tridion.ContentManager.ContentManagement.Category"/> according to the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> as a taxonomy.
            </summary>
            <param name="resolvedItem">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> containing the <see cref="T:Tridion.ContentManager.ContentManagement.Category"/>.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <param name="renderedItem">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> is modified with the result of the render action.</param>
            <param name="renderContext">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TaxonomyRenderer.CanHandleResolvedItem(Tridion.ContentManager.Publishing.Resolving.ResolvedItem)">
            <summary>
            Check if this renderer knows how to render this <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/>.
            </summary>
            <param name="resolvedItem">The resolved item to render.</param>
            <returns><see langword="true"/> if this renderer can render the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.CategoryResolver">
            <summary>
            Represent the resolver for Categories.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ResolverBase">
            <summary>
            Represents the base class for all out of the box resolvers.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.IBulkResolver">
            <summary>
            Defines the methods to resolve multiple Items on multiple Publish Contexts.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.IResolver">
            <summary>
            Defines the methods to resolve items.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.IResolver.Resolve(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Publishing.PublishContext,Tridion.Collections.ISet{Tridion.ContentManager.Publishing.Resolving.ResolvedItem})">
            <summary>
            Get the list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to (re-/un-)publish for a given <see cref="T:Tridion.ContentManager.IdentifiableObject"/> and <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/>.</param>
            <param name="context">The <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> the resolving must be done.</param>
            <param name="resolvedItems">The result of previous resolve actions. Add the result to this list.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.IBulkResolver.Resolve(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.PublishContext})">
            <summary>
            Evaluates the list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to (re-/un-)publish for the given Identifiable Objects and Publish Contexts.
            The list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> is then stored per Publish Context on the <see cref="P:Tridion.ContentManager.Publishing.PublishContext.ResolvedItems"/> property.
            </summary>
            <param name="items">The list of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/>.</param>
            <param name="contexts">The list of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> the resolving must be done in.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.Resolve(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Publishing.PublishContext,Tridion.Collections.ISet{Tridion.ContentManager.Publishing.Resolving.ResolvedItem})">
            <summary>
            Get the list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to (re-/un-)publish for a given <see cref="T:Tridion.ContentManager.CommunicationManagement.Publication"/> and <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/>.</param>
            <param name="context">The <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> the resolving must be done.</param>
            <param name="resolvedItems">The result of previous resolve actions. Add the result to this list.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.GetResolveInstruction(Tridion.ContentManager.Publishing.ResolveInstruction)">
            <summary>
            Called before actual resolving is performed, allowing modification to the Resolve Instruction.
            </summary>
            <remarks>
            This implementation simply returns the value passed in the parameter. This behavior may be changed in subclasses.
            </remarks>
            <param name="instruction">The original Resolve Instruction that initiated the Resolving</param>
            <returns>Optionally a modified Resolve Instruction</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.Resolve(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.PublishContext})">
            <summary>
            Evaluates the list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to (re-/un-)publish for the given Identifiable Objects and Publish Contexts.
            The list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> is then stored per Publish Context on the <see cref="P:Tridion.ContentManager.Publishing.PublishContext.ResolvedItems"/> property.
            </summary>
            <param name="items">The collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve. All of them must be from the same publication.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/>.</param>
            <param name="contexts">The <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> the resolving must be done in.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.IncludeResolvedItem(Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Data.Publishing.ResolvedItemData)">
            <summary>
            Specifies additional business rules to control if a Resolved Item should be included in the Resolved Items that this Resolver returns.
            </summary>
            <remarks>
            This implementation simply returns <c>true</c>, meaning that all Resolved Items are included by default. Subclasses may override this behavior.
            </remarks>
            <param name="instruction">The Resolve Instruction</param>
            <param name="resolvedItemData">The Resolved Item</param>
            <returns><c>true</c> if the given Resolved Item should be included in the results, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.ResolveDataObjects(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.PublishContext})">
            <summary>
            Evaluates the resolving result in form of collection of <see cref="T:Tridion.ContentManager.Data.Publishing.ResolvedItemData"/> data objects.
            </summary>
            <param name="items">The list of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/>.</param>
            <param name="contexts">The list of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> where the resolving must be done.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolverBase.AlterResolveInstructionPurpose(Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Publishing.ResolvePurpose)">
            <summary>
            Creates a copy of the given resolve instruction with the purpose set to the given purpose.
            This is a helper method used by some resolvers that need to enforce a different purpose than the one the user specified.
            It is also used to enforce backwards compatibility.
            </summary>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> clone.</param>
            <param name="purpose">The purpose to use in the returned object</param>
            <returns>The new <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> object.</returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.ResolverBase.IsStructureResolvingSupported">
            <summary>
            Gets a value indicating whether the resolver supports resolving of structure information. The default value is <c>true</c>, because most resolvers provide this support.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.ResolverBase.IsItemResolvingNeededForStructureResolvingSupport">
            <summary>
            Gets a value indicating whether the resolver needs to resolve items first to be able to resolve structure information. The default value is <c>true</c>..
            </summary>
            <remarks>For Resolvers that do not support resolving of structure information (<see cref="P:Tridion.ContentManager.Publishing.Resolving.ResolverBase.IsStructureResolvingSupported"/>), this setting is ignored.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.CategoryResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.CategoryResolver.IsStructureResolvingSupported">
            <summary>
            Specifies whether the resolver supports resolving of structure information. Category resolver does not provide this support.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ComponentResolver">
            <summary>
            Represent the resolver for Components.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ComponentResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ComponentTemplateResolver">
            <summary>
            Represent the resolver for Component Templates.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ComponentTemplateResolver.GetResolveInstruction(Tridion.ContentManager.Publishing.ResolveInstruction)">
            <summary>
            Called before actual resolving is performed, allowing modification to the Resolve Instruction.
            </summary>
            <remarks>
            This implementation simply forces resolving to only return already published items.
            </remarks>
            <param name="instruction">The original Resolve Instruction that initiated the Resolving</param>
            <returns>Optionally a modified Resolve Instruction</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ComponentTemplateResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ComWrapper.IResolveEngine">
            <summary>
            The COM interface for the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ComWrapper.ResolveEngineFacade"/> implementation.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ComWrapper.IResolveEngine.GetListPublishItems(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String[],System.Boolean,System.Boolean,Tridion.ContentManager.Interop.TDSDefines.ListColumnFilter,System.String)">
            <summary>
            Gets the list of items to (re-/un-)publish for a given item, context publication(s) and publication target(s).
            </summary>
            <param name="userContext">Information about who performs the action</param>
            <param name="itemUri">TCM URI of the item to (re-/un-)publish</param>
            <param name="targetUris">An array of TCM URIs representing target types to publish to</param>
            <param name="resolveBlueprinting">Indicates whether to include also child publications</param>
            <param name="resolveWorkflow">Indicates whether to include also items being in workflow</param>
            <param name="columnFilter">Specifies which columns to retrieve</param>
            <param name="rowFilter">Specifies a filter to limit results</param>
            <returns>XML formatted string with ListPublishItems as root element</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ComWrapper.ResolveEngineFacade">
            <summary>
            Com facade from the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolveEngine"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ComWrapper.ResolveEngineFacade.GetListPublishItems(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String[],System.Boolean,System.Boolean,Tridion.ContentManager.Interop.TDSDefines.ListColumnFilter,System.String)">
            <summary>
            Gets the list of items to (re-/un-)publish for a given item, context publication(s) and publication target(s).
            </summary>
            <param name="userContext">Information about who performs the action</param>
            <param name="itemUri">TCM URI of the item to (re-/un-)publish</param>
            <param name="targetUris">An array of TCM URIs representing target types to publish to</param>
            <param name="resolveBlueprinting">Indicates whether to include also child publications</param>
            <param name="resolveWorkflow">Indicates whether to include also items being in workflow</param>
            <param name="columnFilter">Specifies which columns to retrieve</param>
            <param name="rowFilter">Specifies a filter to limit results</param>
            <returns>XML formatted string with ListPublishItems as root element</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.PageResolver">
            <summary>
            Represent the resolver for Pages.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.PageResolver.IncludeResolvedItem(Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Data.Publishing.ResolvedItemData)">
            <summary>
            Specified additional business rules to control if a Resolved Item should be included in the Resolved Items that this Resolver returns.
            </summary>
            <remarks>
            This implementation excludes Components if the Resolve Instruction specified that only items that were already published should be included in the results.
            </remarks>
            <param name="instruction">The Resolve Instruction</param>
            <param name="resolvedItemData">The Resolved Item</param>
            <returns><c>true</c> if the given Resolved Item should be included in the results, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.PageResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.PageTemplateResolver">
            <summary>
            Represent the resolver for Page Templates.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.PageTemplateResolver.GetResolveInstruction(Tridion.ContentManager.Publishing.ResolveInstruction)">
            <summary>
            Called before actual resolving is performed, allowing modification to the Resolve Instruction.
            </summary>
            <remarks>
            This implementation simply forces resolving to only return already published items.
            </remarks>
            <param name="instruction">The original Resolve Instruction that initiated the Resolving</param>
            <returns>Optionally a modified Resolve Instruction</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.PageTemplateResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.PublicationResolver">
            <summary>
            Represent the resolver for publications.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.PublicationResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.PublicationResolver.IsItemResolvingNeededForStructureResolvingSupport">
            <summary>
            Gets a value indicating whether the resolver needs to resolve items first to be able to resolve structure information.
            </summary>
            <value>returns <c>false</c>, because PublicationResolver is able to resolve structure information directly, and does not need to resolve the items first.</value>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ResolveException">
            <summary>
            The exception that is thrown when a resolve error occurs.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveException.#ctor(Tridion.Localization.LocalizableMessage,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolveException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. 
            If the <paramref name="innerException"/> parameter is not a <see langword="null"/> reference, the current exception is raised in a <c>catch</c> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveException.#ctor(Tridion.Localization.LocalizableMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolveException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveException.#ctor(Tridion.Localization.LocalizableMessage,System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolveException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="errorCode">The error code</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Logger">
            <summary>
            Provides methods to write log messages from the <see cref="N:Tridion.ContentManager.Publishing"/> namespace. 
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Write(System.Exception)">
            <summary>
            Writes the specified exception to a log.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> that will be logged.</param>
            <remarks>The category is <see cref="F:Tridion.ContentManager.LogCategory.Publishing"/> and the component is <value>Publisher</value>.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Write(System.Exception,System.String,System.Enum)">
            <summary>
            Writes the specified exception to a log.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> that will be logged.</param>
            <param name="component">The component that logs this exception.</param>
            <param name="category">The category to which this exception is routed.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Verbose(System.String)">
            <summary>
            Writes the specified debugging message to a log.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Verbose(Tridion.Localization.LocalizableMessage)">
            <summary>
            Writes the specified localizable message to a log.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Warning(Tridion.Localization.LocalizableMessage)">
            <summary>
            Writes the specified warning message to a log.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Warning(System.String)">
            <summary>
            Writes the specified warning message to a log.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Logger.Information(Tridion.Localization.LocalizableMessage)">
            <summary>
            Writes the specified informational message to a log.
            </summary>
            <param name="message">The message to write to the log.</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.ProcessedItem">
            <summary>
            Represents a <see cref="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem"/> with render information.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/>.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.#ctor(Tridion.ContentManager.Publishing.Resolving.ResolvedItem)">
            <summary>
            Initializes a new <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with a specified <see cref="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem"/>.
            </summary>
            <param name="resolvedItem">A <see cref="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem"/> for which 
            to store additional rendering information.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.#ctor(Tridion.ContentManager.Publishing.Rendering.RenderedItem)">
            <summary>
            Initializes a new <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with a specified <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/>.
            </summary>
            <param name="renderedItem">A <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> for which to store additional rendering information.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.#ctor(Tridion.ContentManager.Publishing.Resolving.ResolvedItem,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with a specified <see cref="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem"/> with a render exception.
            </summary>
            <param name="resolvedItem">A <see cref="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem"/> for which to store a render exception.</param>
            <param name="renderException">The <see cref="T:System.Exception"/> that caused the render failure.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.#ctor(Tridion.ContentManager.Data.Publishing.ProcessedItemData,Tridion.ContentManager.Session)">
            <summary>
            Initializes an instance of the <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> class pre-loaded with a given data object.
            </summary>
            <param name="data">The data object to use as (pre-loaded) current state</param>
            <param name="session">The session in which the object should be created</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.Update(System.TimeSpan,System.Boolean)">
            <summary>
            Updates the <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with a render time and render state.
            </summary>
            <param name="renderTime">A <see cref="T:System.TimeSpan"/> that represents the duration of the rendering process.</param>
            <param name="isRendered">A <see cref="T:System.Boolean"/> that indicates whether the item was rendered.</param>
            <remarks>This method is used by <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> to parse 
            old-style publisher requests.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.Update(System.TimeSpan,System.Boolean,System.String)">
            <summary>
            Updates the <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with a render time, render state and a reason of failure.
            </summary>
            <param name="renderTime">A <see cref="T:System.TimeSpan"/> that represents the duration of the rendering process.</param>
            <param name="isRendered">A <see cref="T:System.Boolean"/> that indicates whether the item was rendered.</param>
            <param name="reasonOfRenderFailure">A <see cref="T:System.String"/> that holds the reason of failure of the rendering process.</param>
            <remarks>This method is used by <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> to parse 
            old-style publisher requests.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ProcessedItem.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.Session">
            <summary>
            Gets the session in which the object was created.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.CurrentState">
            <summary>
            Gets the current state as a data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem">
            <summary>
            Gets the <see cref="P:Tridion.ContentManager.Publishing.ProcessedItem.ResolvedItem"/> for which this class stores additional rendering information.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.RenderTime">
            <summary>
            Gets the duration of the rendering process for the processed item.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.IsRendered">
            <summary>
            Gets a value indicating whether the item has been fully rendered.
            </summary>
            <value>
            <c>true</c> if the item has been fully rendered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.HasRenderFailure">
            <summary>
            Gets a value indicating whether the item failed rendering.
            </summary>
            <value>
            <c>true</c> if the item has failed rendering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ProcessedItem.ReasonOfRenderFailure">
            <summary>
            Gets the reason of failure of the rendering process.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishContext">
            <summary>
            Represents the combination of a <see cref="P:Tridion.ContentManager.Publishing.PublishContext.Publication"/> and a <see cref="P:Tridion.ContentManager.Publishing.PublishContext.PublicationTarget"/> and collection of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> and <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/>.
            </summary>
            <remarks>
            <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> objects should not be created manually - instead, one of the <c>ResolvePublishContext</c> methods should be used in <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolveEngine"/>.
            Those methods resolve publishing contexts necessary for particular resolving operation and return them as a result. 
            If <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> is created manually and used in resolving, the collection of resolved items can be incorrect or incomplete.
            </remarks>
            <seealso cref="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget})"/>
            <seealso cref="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType})"/>
            <seealso cref="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget})"/>
            <seealso cref="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType})"/>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.#ctor(Tridion.ContentManager.CommunicationManagement.Publication,Tridion.ContentManager.CommunicationManagement.PublicationTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> class.
            </summary>
            <param name="publication">
            The <see cref="P:Tridion.ContentManager.Publishing.PublishContext.Publication"/> this <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> belongs to.
            </param>
            <param name="publicationTarget">
            The <see cref="P:Tridion.ContentManager.Publishing.PublishContext.PublicationTarget"/> this <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> belongs to.
            </param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.#ctor(Tridion.ContentManager.Data.Publishing.PublishContextData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> class pre-loaded with a given data object.
            </summary>
            <param name="data">
            The data object to use as (pre-loaded) current state
            </param>
            <param name="session">
            The session in which the object should be created
            </param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.UpdateProcessedItems(System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.ProcessedItem})">
            <summary>
            Updates the list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with this new list.
            </summary>
            <param name="processedItems">The new list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/></param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.AddResolvedItems(Tridion.Collections.ISet{Tridion.ContentManager.Publishing.Resolving.ResolvedItem})">
            <summary>
            Adds the given Resolved Items to the list of Resolved Items of this Publish Context.
            </summary>
            <param name="resolvedItems">The list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to add to this object's Resolved Items list.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.SetResolvedItems(Tridion.Collections.ISet{Tridion.ContentManager.Publishing.Resolving.ResolvedItem})">
            <summary>
            Replaces the Resolved Items of this Publish Context with the given Resolved Items.
            </summary>
            <param name="resolvedItems">The list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to set on this object's Resolved Items list.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.SyncCurrentState">
            <summary>
            Ensures that the <see cref="P:Tridion.ContentManager.Publishing.PublishContext.CurrentState"/> property is up-to-date.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.Equals(Tridion.ContentManager.Publishing.PublishContext)">
            <summary>
            Indicates whether the current <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> is equal to another <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.
            </summary>
            <param name="other">An <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> to compare with this <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</param>
            <returns><c>true</c> if the current <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishContext.HasSameKey(Tridion.ContentManager.Publishing.PublishContext)">
            <summary>
            Determines whether the Publish Context is for the same Publication/PubTarget combination as a given other.
            </summary>
            <param name="other">The other Publish Context to compare with.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishContext.Session">
            <summary>
            Gets the session in which the object was created.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishContext.CurrentState">
            <summary>
            Gets the current state as a data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishContext.Publication">
            <summary>
            Gets the <see cref="P:Tridion.ContentManager.Publishing.PublishContext.Publication"/>
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishContext.PublicationTarget">
            <summary>
            Gets the <see cref="P:Tridion.ContentManager.Publishing.PublishContext.PublicationTarget"/>
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishContext.ProcessedItems">
            <summary>
            Gets a read only collection of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/>.
            </summary>
            <remarks>
            Only returns a read only collection when processed by the PublisherEngine otherwise <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishContext.ResolvedItems">
            <summary>
            Gets an enumeration of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/>.
            </summary>
            <remarks>
            Only returns an enumeration when processed by the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolveEngine"/> otherwise <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishEngine">
            <summary>
            The engine that is responsible for publishing items of type <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.PublishEngine._isLegacyPublishStateEventEnabled">
            <summary>
            Specifies whether events have been enabled for setting the Publish state.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.#cctor">
            <summary>
            Verifies whether events are enabled for setting the Publish state.
            </summary>
            <remarks>
            Reading of the configuration values uses dynamic binding to avoid circular dependency with assemblies.
            This is temporary solution, because finally all configuration should be migrated to native .NET mechanism.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.Publish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget},Tridion.ContentManager.Publishing.PublishPriority)">
            <summary>
            Publishes, re-publishes and/or deploys the <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s and related items to given <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>s.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to publish.</param>
            <param name="publishInstruction">The instruction for the publish action.</param>
            <param name="publicationTargets">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> instances where the rendered items are published to.</param>
            <param name="priority">The priority of the publish action.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.Publish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget})">
            <summary>
            Publishes, re-publishes and/or deploys the <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s and related items to given <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>s.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to publish.</param>
            <param name="publishInstruction">The instruction for the publish action.</param>
            <param name="publicationTargets">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> instances where the rendered items are published to.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.Publish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType},Tridion.ContentManager.Publishing.PublishPriority)">
            <summary>
            Publishes, re-publishes and/or deploys the <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s and related items to given <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/>s.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to publish.</param>
            <param name="publishInstruction">The instruction for the publish action.</param>
            <param name="targetTypes">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/> instances where the rendered items are published to.</param>
            <param name="priority">The priority of the publish action.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.Publish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType})">
            <summary>
            Publishes, re-publishes and/or deploys the <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s and related items to given <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/>s.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to publish.</param>
            <param name="publishInstruction">The instruction for the publish action.</param>
            <param name="targetTypes">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/> instances where the rendered items are published to.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.UnPublish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.UnPublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget},Tridion.ContentManager.Publishing.PublishPriority)">
            <summary>
            Un-publishes and/or deploys the collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> instances 
            and related items to the number of specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> instances.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to un-publish.</param>
            <param name="unPublishInstruction">The instruction for the un-publish action.</param>
            <param name="publicationTargets">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> instances where the rendered items are published to.</param>
            <param name="priority">The priority of the un-publish action.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.UnPublish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.UnPublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget})">
            <summary>
            Un-publishes and/or deploys the collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> instances 
            and related items to the number of specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> instances.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to un-publish.</param>
            <param name="unPublishInstruction">The instruction for the un-publish action.</param>
            <param name="publicationTargets">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> instances where the rendered items are published to.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.UnPublish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.UnPublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType},Tridion.ContentManager.Publishing.PublishPriority)">
            <summary>
            Un-publishes and/or deploys the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> instances and related 
            items to the number of specified <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/> instances.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to un-publish.</param>
            <param name="unPublishInstruction">The instruction for the un-publish action.</param>
            <param name="targetTypes">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/> instances where the rendered items are published to.</param>
            <param name="priority">The priority of the un-publish action.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.UnPublish(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.UnPublishInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType})">
            <summary>
            Un-publishes and/or deploys the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> instances and related 
            items to the number of specified <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/> instances.
            </summary>
            <param name="items">A non-generic collection of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s to un-publish.</param>
            <param name="unPublishInstruction">The instruction for the un-publish action.</param>
            <param name="targetTypes">A non-generic collection of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/> instances where the rendered items are published to.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/></returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.IsPublished(Tridion.ContentManager.IdentifiableObject)">
            <summary>
            Returns whether the given item is published at any <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to test for its publish state.</param>
            <returns><c>true</c> if the given item is published at any
            <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.IsPublished(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.PublicationTarget)">
            <summary>
            Returns whether the given item is published at the specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to test for its publish state.</param>
            <param name="publicationTarget">The <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> at which to test
            for the item's publish state.</param>
            <returns>
            <c>true</c> if the given item is published at the 
            specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> or any Publication Target when none specified; otherwise, <c>false</c>.
            </returns>
            <remarks>
            If <paramref name="publicationTarget"/> is not specified then the published state of the item will be checked against
            all existing Publication Targets and if the item is published at least to one Publication Target then return value will be <c>true</c>; otherwise, <c>false</c>.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.IsPublished(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.PublicationTarget,System.Boolean)">
            <summary>
            Returns whether the given item is published at the specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to test for its publish state.</param>
            <param name="publicationTarget">The <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> at which to test
            for the item's publish state.</param>
            <param name="isPublishedInContext">Indicates if state should be returned regardless of the context Publication. <c>true</c> only check if item is published in the context Publication;
            otherwise, <c>false</c>.</param>
            <returns>
            <c>true</c> if the given item is published at the 
            specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> or any Publication Target when none specified; otherwise, <c>false</c>.
            </returns>
            <remarks>
            If <paramref name="publicationTarget"/> is not specified then the published state of the item will be checked against
            all existing Publication Targets and if the item is published at least to one Publication Target then return value will be <c>true</c>; otherwise, <c>false</c>.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.GetPublishState(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.PublicationTarget,System.Boolean)">
            <summary>
            Returns whether the given item is published at the specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to test for its publish state.</param>
            <param name="publicationTarget">The <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> at which to test
            for the item's publish state.</param>
            <param name="isPublishedInContext">Indicates if state should be returned regardless of the context Publication. <c>true</c> only check if item is published in the context Publication;
            otherwise, <c>false</c>.</param>
            <returns><c>true</c> if the given item is published at the 
            specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>; otherwise, <c>false</c>.</returns>
            <remarks>When a <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> is not specified, the value will be <c>false</c> 
            if it is not published at one of the valid Publication Targets.</remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.GetPublishInfo(Tridion.ContentManager.IdentifiableObject)">
            <summary>
            Gets the publish information collection used to store additional information
            about the published items.
            </summary>
            <param name="item">A <see cref="T:Tridion.ContentManager.IdentifiableObject"/> for which to get 
            additional publish information.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishInfo"/> objects.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.SetPublishState(System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.ProcessedItem},System.Boolean,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Security.User)">
            <summary>
            Sets the publish state for the processed items for the 
            specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> by the specified <see cref="T:Tridion.ContentManager.Security.User"/>.
            </summary>
            <param name="processedItems">A list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> objects.</param>
            <param name="isPublished">A <see cref="T:System.Boolean"/> that indicates whether the 
            processed items are published.</param>
            <param name="publicationTarget">A <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> to which the 
            processed items are published.</param>
            <param name="publisher">A <see cref="T:Tridion.ContentManager.Security.User"/> who published the processed items.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.SetPublishState(System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.ProcessedItem},System.Boolean,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Security.User,System.Boolean)">
            <summary>
            Sets the publish state for the processed items for the 
            specified <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> by the specified <see cref="T:Tridion.ContentManager.Security.User"/>.
            </summary>
            <param name="processedItems">A list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> objects.</param>
            <param name="isPublished">A <see cref="T:System.Boolean"/> that indicates whether the processed items are published.</param>
            <param name="publicationTarget">A <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> to which the processed items are published.</param>
            <param name="publisher">A <see cref="T:Tridion.ContentManager.Security.User"/> who published the processed items.</param>
            <param name="isCalledFromFacade">A <see cref="T:System.Boolean"/> that indicates whether this method is called from the <see cref="T:Tridion.ContentManager.Publishing.ComWrapper.PublishEngineFacade"/></param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.GetPublishTransactions(Tridion.ContentManager.Publishing.PublishTransactionsFilter)">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> objects as an <see cref="T:System.Collections.Generic.IEnumerable`1"/> constrained by the specified <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/>.
            </summary>
            <param name="filter">A <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/> that constraints the list of Publish Transaction in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <remarks>
            User that has <see cref="F:Tridion.ContentManager.Security.Rights.PublishManagement"/> right in any publication can see publish transactions from all publications.
            </remarks>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> objects.</returns>
            <exception cref="T:Tridion.ContentManager.AccessDeniedException">If user is not a System Administrator and doesn't have <see cref="F:Tridion.ContentManager.Security.Rights.PublishManagement"/> rights in any publication.</exception>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.GetListPublishTransactions(Tridion.ContentManager.Publishing.PublishTransactionsFilter)">
            <summary>
            Gets a list of Publish Transaction as a <see cref="T:System.Xml.XmlElement"/> constrained by the specified <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/>.
            </summary>
            <param name="filter">A <see cref="T:Tridion.ContentManager.Publishing.PublishTransactionsFilter"/> that constraints the list of Publish Transactions.</param>
            <remarks>
            User that has <see cref="F:Tridion.ContentManager.Security.Rights.PublishManagement"/> right in any publication can see publish transactions from all publications.
            </remarks>
            <returns>A list of Publish Transactions as a <see cref="T:System.Xml.XmlElement"/>.</returns>
            <exception cref="T:Tridion.ContentManager.AccessDeniedException">If user is not a System Administrator and doesn't have <see cref="F:Tridion.ContentManager.Security.Rights.PublishManagement"/> rights in any publication.</exception>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.CreatePublishTransactions(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstructionBase,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublishingTarget},System.Nullable{Tridion.ContentManager.Publishing.PublishPriority})">
            <summary>
            Gets a collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> instances for the 
            specified items and targets based on the specified instruction.
            </summary>
            <param name="items"></param>
            <param name="instruction"></param>
            <param name="targets"></param>
            <param name="priority"></param>
            <returns>A collection that holds a list of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> instances.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.InternalCreatePublishTransactionsXml(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstructionBase,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublishingTarget},System.Nullable{Tridion.ContentManager.Publishing.PublishPriority})">
            <summary>
            Gets a collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> instances for the 
            specified items and targets based on the specified instruction.
            </summary>
            <param name="items"></param>
            <param name="instruction"></param>
            <param name="targets"></param>
            <param name="priority"></param>
            <returns>A string containing the PublishTransactions in the old legacy format.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.InternalCreatePublishTransactions(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.PublishInstructionBase,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublishingTarget},System.Nullable{Tridion.ContentManager.Publishing.PublishPriority})">
            <summary>
            Gets a collection of <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> instances for the 
            specified items and targets based on the specified instruction.
            </summary>
            <param name="items"></param>
            <param name="instruction"></param>
            <param name="targets"></param>
            <param name="priority"></param>
            <returns>A string containing the PublishTransactions in the old legacy format.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishEngine.AssertObjectIsPublishable(Tridion.ContentManager.IdentifiableObject)">
            <summary>
            Validates whether the <see cref="T:Tridion.ContentManager.PublishableAttribute"/> is applied to the 
            class and specifies that the class is publishable.
            </summary>
            <param name="item">An <see cref="T:Tridion.ContentManager.IdentifiableObject"/> that
            is to be validated.</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublisherException">
            <summary>
            The exception that is thrown when a Publisher error occurs.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublisherException.#ctor(Tridion.Localization.LocalizableMessage,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublisherException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. 
            If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a <c>catch</c> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublisherException.#ctor(Tridion.Localization.LocalizableMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublisherException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishInfo">
            <summary>
            Provides information regarding a published item.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInfo.#ctor(Tridion.ContentManager.CommunicationManagement.Publication,Tridion.ContentManager.CommunicationManagement.PublicationTarget,System.DateTime,Tridion.ContentManager.Security.User,Tridion.ContentManager.CommunicationManagement.Template)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInfo"/> class by using the specified 
            Publication, Publication Target, date and time at which the item was published, user who published the item and with which Template the item was rendered.
            </summary>
            <param name="publication">A <see cref="P:Tridion.ContentManager.Publishing.PublishInfo.Publication"/> from which the item is published.</param>
            <param name="publicationTarget">A <see cref="P:Tridion.ContentManager.Publishing.PublishInfo.PublicationTarget"/> to which the item was published.</param>
            <param name="publishedAt">A <see cref="T:System.DateTime"/> at which the item was published.</param>
            <param name="publishedBy">A <see cref="T:Tridion.ContentManager.Security.User"/> by which the item was published.</param>
            <param name="renderedWith">A <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> that was used to render the item.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInfo.#ctor(Tridion.ContentManager.Data.Publishing.PublishInfoData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInfo"/> class with a given Data Object.
            </summary>
            <param name="data">The Data Object to use as (pre-loaded) current state</param>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInfo.Publication">
            <summary>
            Gets the <see cref="P:Tridion.ContentManager.Publishing.PublishInfo.Publication"/> from which the item was published.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInfo.PublicationTarget">
            <summary>
            Gets the <see cref="P:Tridion.ContentManager.Publishing.PublishInfo.PublicationTarget"/> to which the item was published.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInfo.PublishedAt">
            <summary>
            Gets the <see cref="T:System.DateTime"/> at which the item was last published.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInfo.PublishedBy">
            <summary>
            Gets the <see cref="T:Tridion.ContentManager.Security.User"/> by which the item was published.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInfo.RenderedWith">
            <summary>
            Gets the <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> with which the item was rendered.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInfo.CurrentState">
            <summary>
            Gets current state of the item.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishInstruction">
            <summary>
            Represents the instructions needed for publishing an <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishInstructionBase">
            <summary>
            The base class for the publish instructions.
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.PublishInstructionBase.publishingNamespace">
            <summary>
            The http://www.tridion.com/ContentManager/5.3/Publishing namespace declaration.
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.PublishInstructionBase.publishingPrefix">
            <summary>
            Default namespace prefix.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.#ctor(Tridion.ContentManager.Data.Publishing.PublishInstructionBaseData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> class pre-loaded with a given Data Object.
            </summary>
            <param name="state">The state to pre-load this instance with.</param>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> class.
            </summary>
            <param name="session">The session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.CreateFromDataObject(Tridion.ContentManager.Data.Publishing.PublishInstructionBaseData,Tridion.ContentManager.Session,System.Type)">
            <summary>
            Creates an instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> class based on the actual type stored in the extension information of the data object.
            </summary>
            <param name="data">The data object to use as current state</param>
            <param name="session">The session in which the object should be created</param>
            <param name="defaultType">Default type of the implementation of <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/>.</param>
            <returns>The newly created instance</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.CreateDataObject">
            <summary>
            Creates a new data object instance for initializing current state.
            The actual type of the data object corresponds to the enclosing business object.
            </summary>
            <remarks>
            This method is responsible for setting an appropriate (not-<c>null</c>) value for the <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction"/> property.
            </remarks>
            <returns>
            A data object instance
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.GetAllowedResolvePurposes">
            <summary>
            Gets a collection containing the possible valid resolving purposes for this instruction.
            The <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property of the <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction"/> contained in this object will be limited to these values.
            The implementation on this class returns all possible values, not posing any limitations of the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property.
            </summary>
            <returns>A collection containing the possible valid resolving purposes for this instruction</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates a <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> from its XML representation. 
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> is deserialized.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts this <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> is serialized.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.SyncCurrentState">
            <summary>
            Ensures that the <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.CurrentState"/> property is up-to-date.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.ResetEmbeddedObjects">
            <summary>
            Sets embedded business object references to <c>null</c> forcing them to be recreated on next access.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.SetExtensionXml">
            <summary>
            Rebuilds the XML representation of the extension information.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstructionBase.SetDefaultData">
            <summary>
            Sets default values for <c>null</c> properties of the data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstructionBase.CurrentState">
            <summary>
            Gets the current state as a data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstructionBase.Session">
            <summary>
            Gets or sets the session in which the object was created.
            </summary>
            <remarks>
            If the user tries to read this property and a Session has not been set, a new Session is established.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstructionBase.StartAt">
            <summary>
            Gets or sets the date time when the publishing should be started. Set <see cref="F:System.DateTime.MinValue"/> value to start immediately.
            </summary>
            <value>The date/time at which publishing should be started.</value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction"/>.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> class features the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property
                    that allows the user to indicate the purpose of the Resolving Operation. However, when using a subclass of <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/>,
                    the class itself already defines the purpose (or sets some limitations on what it is allowed to be).
                    For example, the <see cref="T:Tridion.ContentManager.Publishing.UnPublishInstruction"/> class already indicates that the resolving purpose is <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.UnPublish"/>
                    while the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> class dictates that the resolving purpose can be either <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.Publish"/>
                    or <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.RePublish"/>.
                </para>
                <para>
                    When you set this property, you need to make sure that the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> is not set
                    or that it will be set to a value that is accepted by this Publish Instruction. The same applies when changing the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/>
                    property of this Publish Instruction's Resolve Instruction. In both cases, an <see cref="T:Tridion.ContentManager.InvalidPropertyValueException"/> will be thrown
                    if the Purpose defined in this object's ResolveInstruction property is not compatible with this object.
                </para>
            </remarks>
            <example>
                The following code works without throwing an Exception:
                <code>
                ResolveInstruction resolveInstruction = new ResolveInstruction { Purpose = ResolvePurpose.RePublish };
                PublishInstruction publishInstruction = new PublishInstruction { ResolveInstruction = resolveInstruction };
                publishInstruction.ResolveInstruction.Purpose = ResolvePurpose.Publish;
                publishInstruction.ResolveInstruction = new ResolveInstruction { Purpose = ResolvePurpose.Publish };
                </code>
                But either of the following two examples will cause an <see cref="T:Tridion.ContentManager.InvalidPropertyValueException"/>:
                <code>
                // when using a PublishInstruction, cannot set Purpose of the embedded ResolveInstruction to UnPublish
                publishInstruction.ResolveInstruction.Purpose = ResolvePurpose.UnPublish;
            
                // when using a PublishInstruction, cannot set ResolveInstruction to a ResolveInstruction whose Purpose is UnPublish
                publishInstruction.ResolveInstruction = new ResolveInstruction { Purpose = ResolvePurpose.UnPublish };
                </code>
            </example>
            <exception cref="T:Tridion.TridionArgumentNullException">when trying to set the property to <c>null</c></exception>
            <exception cref="T:Tridion.ContentManager.InvalidPropertyValueException">when trying to directly or indirectly change the Purpose of this object's ResolveInstruction to an incompatible value</exception>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstructionBase.RollbackOnFailure">
            <summary>
            Gets or sets a value indicating whether to rollback when there is a failure during deployment.
            </summary>
            <value><c>true</c> if the publish transaction should rollback on failure; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ExtensionXml">
            <summary>
            Gets additional properties of derived classes.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> class.
            </summary>
            <remarks>
            This constructor has been deprecated. Please use <see cref="M:Tridion.ContentManager.Publishing.PublishInstruction.#ctor(Tridion.ContentManager.Session)"/> instead and pass your current session.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> class.
            </summary>
            <param name="session">The session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.#ctor(Tridion.ContentManager.Data.Publishing.PublishInstructionData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> class pre-loaded with a given Data Object.
            </summary>
            <param name="state">The state to pre-load this instance with.</param>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.CreateDataObject">
            <summary>
            Creates a new data object instance for initializing current state.
            The actual type of the data object corresponds to the enclosing business object.
            </summary>
            <returns>A data object instance</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.GetAllowedResolvePurposes">
            <summary>
            Gets a collection containing the possible valid resolving purposes for this instruction.
            The <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property
            of the <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction"/> contained in this object will be limited to these values.
            </summary>
            <returns>
            A collection containing the possible valid resolving purposes for this instruction, namely
            <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.Publish"/> and <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.RePublish"/>.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.SyncCurrentState">
            <summary>
            Ensures that the <see cref="P:Tridion.ContentManager.Publishing.PublishInstruction.CurrentState"/> property is up-to-date.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.ResetEmbeddedObjects">
            <summary>
            Sets embedded business object references to <c>null</c> forcing them to be recreated on next access.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishInstruction.SetDefaultData">
            <summary>
            Sets default values for <c>null</c> properties of the data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstruction.CurrentState">
            <summary>
            Gets the current state as a data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstruction.RenderInstruction">
            <summary>
            Gets or sets the <see cref="P:Tridion.ContentManager.Publishing.PublishInstruction.RenderInstruction"/>.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstruction.DeployAt">
            <summary>
            Gets or sets the date/time when the content should be deployed at the content delivery side. Set current time value to deploy immediately.
            </summary>
            <value>The date/time when to deploy.</value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishInstruction.MaximumNumberOfRenderFailures">
            <summary>
            Gets or sets the maximum number of render failures before the Publish Transaction is considered to be failed. Use 0 to fail on first
            failure.
            </summary>
            <value>The maximum number of render failures.</value>
            <remarks>Publish Transaction will fail if the number of render failures exceeds the MaximumNumberOfRenderFailures, default = 0.</remarks>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.PublishTransaction">
            <summary>
            Represents the transaction during the publishing process.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.#ctor">
            <summary>
            Constructor used internally for registering the type.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.#ctor(Tridion.ContentManager.TcmUri,Tridion.ContentManager.Session)">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> class.
            </summary>
            <param name="id">The Tcm Uri of an existing <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/>.</param>
            <param name="session">Use this <see cref="T:Tridion.ContentManager.Session"/> to get retrieve the <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/>.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.#ctor(System.Xml.XmlElement,Tridion.ContentManager.Session)">
            <summary>
            Create an instance based on an existing XML representation
            </summary>
            <param name="xmlRepresentation">The XML representation to be used as state of the object.</param>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.#ctor(Tridion.ContentManager.Data.Publishing.PublishTransactionData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> class that is pre-loaded with a given Data Object.
            </summary>
            <param name="data">The Data Object to use as (pre-loaded) current state</param>
            <param name="session">The Session in which the object should be created</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> class.
            </summary>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.ValidateSystemConstraints">
            <summary>
            Validates system constraints before this object is saved.
            </summary>
            <remarks>
            The word system here is used to imply that these constraints are hard-coded and not possible to be altered by the user.
            For constraints that the user can alter by means of XSD, see <see cref="M:Tridion.ContentManager.IdentifiableObject.CollectPropertiesForCustomValidation(Tridion.ContentManager.CustomizablePropertiesValidator)"/>.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.CollectPropertiesForCustomValidation(Tridion.ContentManager.CustomizablePropertiesValidator)">
            <summary>
            Collects the properties of an Identifiable Object that are subject to XSD validation.
            The validation is user configurable by XSD files.
            </summary>
            <param name="item">An object that will be serialized and validated against an XSD document.</param>
            <remarks>
            This method checks constraints against a user editable XSD file. For system critical constraints that the user
            should not be able to alter, see <see cref="M:Tridion.ContentManager.IdentifiableObject.ValidateSystemConstraints"/>.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.GetListProcessedItems(Tridion.ContentManager.Publishing.PublishContext)">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> for this <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>
            </summary>
            <param name="context">The <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> are part of this<see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</param>
            <returns>A list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.UpdateProcessedItems(Tridion.ContentManager.Publishing.PublishContext,System.Collections.Generic.List{Tridion.ContentManager.Publishing.ProcessedItem})">
            <summary>
            Updates the list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> with this new list.
            </summary>
            <param name="context">The new list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/> are belonging to this <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</param>
            <param name="processedItems">The new list of <see cref="T:Tridion.ContentManager.Publishing.ProcessedItem"/></param>
            <remarks>
            Sets the <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.HasRenderFailures"/> property to <c>true</c> when one of the processed items has failed rendering.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.Save">
            <summary>
            Save the state of the object to the database.
            </summary>
            <remarks>
            You can't specify tcm:0-0-0. It is not possible to save a new object.        
            Before actual saving the item to the database, business rules will be checked.
            </remarks>        
            <exception cref="T:Tridion.ContentManager.InvalidUriException">All properties that link to other objects will be validated. This exception will be thrown if 
                    <list type="bullet"><item><description>the <see cref="T:Tridion.ContentManager.TcmUri"/> contains a version</description></item>
                                        <item><description>the <see cref="T:Tridion.ContentManager.ItemType"/> does not match the link type</description></item>
                                        <item><description>the linked item does not exist</description></item>
                                        <item><description>the Context Publication ID of the linked item does not match the current context</description></item>
                    </list>
            </exception>
            <example>
            <code>
            //Get a Publish Transaction for editing
            PublishTransaction publishTransaction = Session.GetObject("tcm:0-1-66560");
            //Change state
            publishTransaction.State = PublishTransactionState.WaitingForPublish;        
            publishTransaction.Save();
            </code>
            </example>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.GetDataObjectType">
            <summary>
            Get the type of the Data Object associated with this BL class.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> of the Data Object.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.GetTypeId">
            <summary>
            Gets the type ID for this type.
            </summary>
            <returns>The type identifier.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.GetTypeResource">
            <summary>
            Gets the name of a string resource containing the localizable type name.
            </summary>
            <returns>The name of a string resource.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.SetDefaultData">
            <summary>
            Set the loaded state to reflect default data for a newly created object.
            </summary>
            <remarks>
            Ensure to use the <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.LoadedState"/> property and not the <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.CurrentState"/> property.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.SyncCurrentState">
            <summary>
            Ensure that the <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.CurrentState"/> property is up-to-date
            </summary>
            <remarks>
            Subclasses may keep derived state next to the CurrentState property (typically: collections of TOM.NET objects).
            When this method is called, the CurrentState property has to be updated to reflect the latest state and this additional derived state flushed.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.SyncDerivedProperties">
            <summary>
            Ensures that the derived properties of <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.CurrentState"/> is up-to-date.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.Unload">
            <summary>
            Unloads the current and loaded state
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.OnLoading(Tridion.ContentManager.Extensibility.Events.LoadEventArgs)">
            <summary>
            Called by <see cref="M:Tridion.ContentManager.IdentifiableObject.Load(Tridion.ContentManager.LoadFlags,System.Boolean)"/>, before going to the DAL.
            </summary>
            <remarks>
            Business Rule checks go in here.
            </remarks>
            <param name="eventArgs">The Event data based on the method parameters.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.OnLoaded(Tridion.ContentManager.Extensibility.Events.LoadEventArgs)">
            <summary>
            Called by <see cref="M:Tridion.ContentManager.IdentifiableObject.Load(Tridion.ContentManager.LoadFlags,System.Boolean)"/>, after going to the DAL.
            </summary>
            <remarks>
                <para>
                    Default implementation only converts WebDAV URLs is requested. Subclasses can override if more post processing is needed.
                </para>
                <para>
                    The <c>IsEditable</c> property is set explicitly to <c>false</c>, because that's always the case.
                </para>
            </remarks>
            <param name="eventArgs">The Event data based on the method parameters.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.SetAllowedActions">
            <summary>
            Determine allowed actions for this object and set the <see cref="P:Tridion.ContentManager.Data.IdentifiableObjectData.AllowedActions"/> property.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.Delete">
            <summary>
            Permanently deletes the item or a specific version of the item from the
            system.
            </summary>
            <remarks>
                <para>The object should not be used anymore after this method has been called.</para>
                <para>
                    For an instance of a class that derives from <see cref="T:Tridion.ContentManager.ContentManagement.VersionedItem"/>,
                    the version that is loaded into the instance is taken into account. If the
                    latest version of the item is loaded without a version specified in the
                    <see cref="T:Tridion.ContentManager.TcmUri"/>, the item will be fully deleted. If a specific
                    version of the item is loaded, only that version will be deleted.
                </para>
                <para>
                    If the object being deleted is a <see cref="T:Tridion.ContentManager.ContentManagement.Keyword"/>, the method <see cref="M:Tridion.ContentManager.ContentManagement.Keyword.Delete(Tridion.ContentManager.ContentManagement.DeleteTaxonomyNodeMode)"/>
                    offers more control over the handling of the keyword's descendants. The <see cref="M:Tridion.ContentManager.Publishing.PublishTransaction.Delete"/> method
                    is the equivalent of calling <see cref="M:Tridion.ContentManager.ContentManagement.Keyword.Delete(Tridion.ContentManager.ContentManagement.DeleteTaxonomyNodeMode)"/> method with an argument value of
                    <see cref="F:Tridion.ContentManager.ContentManagement.DeleteTaxonomyNodeMode.RemoveParentFromChildren"/>.
                </para>
                <para>
                    If the object being deleted is a <see cref="T:Tridion.ContentManager.ContentManagement.OrganizationalItem"/>, the delete event will be raised only for item itself and
                    not for child items. 
                </para>
            </remarks>
            <exception cref="T:Tridion.ContentManager.InvalidUriException" caption="">The <see cref="T:Tridion.ContentManager.ContentManagement.VersionedItem"/> instance represents the latest version. The instance was created using a <see cref="T:Tridion.ContentManager.TcmUri"/> that specifies the latest version.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.ContentManagement.VersionedItem"/> instance is checked-out.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.CommunicationManagement.StructureGroup"/> instance is a root Structure Group in a parent Publication of a BluePrint hierarchy.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.ContentManagement.Folder"/> instance is a root Folder.</exception>
            <exception cref="T:Tridion.ContentManager.ItemHasLocalCopiesException">The item is localized in another Publication in the BluePrint hierarchy.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException">The item is published.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.ContentManagement.RepositoryLocalObject"/> instance is localized.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.ContentManagement.RepositoryLocalObject"/> instance is shared.</exception>
            <exception cref="T:Tridion.ContentManager.PermissionDeniedException">The user does not have Delete permissions or appropriate rights.</exception>
            <exception cref="T:Tridion.ContentManager.ItemIsInUseException" caption="">The embedded <see cref="T:Tridion.ContentManager.ContentManagement.Schema"/> instance is included or imported by another Schema.</exception>
            <exception cref="T:Tridion.ContentManager.ItemIsInUseException">The item is in use by another item.</exception>
            <exception cref="T:Tridion.ContentManager.PermissionDeniedException" caption="">The User that is performing a Delete action on the <see cref="T:Tridion.ContentManager.Security.Trustee"/> instance is not a system administrator.</exception>
            <exception cref="T:Tridion.ContentManager.PermissionDeniedException" caption="">The User that is performing a Delete action on the <see cref="T:Tridion.ContentManager.ContentManagement.Repository"/> instance is not a system administrator.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.Security.Trustee"/> instance is predefined by the system.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidActionException" caption="">The <see cref="T:Tridion.ContentManager.Security.Trustee"/> instance represents the user that is performing the Delete action.</exception>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.OnDeleting(Tridion.ContentManager.Extensibility.Events.DeleteEventArgs)">
            <summary>
            Called by <see cref="M:Tridion.ContentManager.Publishing.PublishTransaction.Delete"/>, before going to the DAL.
            </summary>
            <param name="eventArgs">The Event data based on the method parameters.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.OnSaving(Tridion.ContentManager.Extensibility.Events.SaveEventArgs)">
            <summary>
            Called by <see cref="M:Tridion.ContentManager.IdentifiableObject.Save"/>, before going to the DAL.
            </summary>
            <param name="eventArgs">The Event data based on the method parameters.</param>
            <remarks>
            This method is checking the business rules for an <see cref="T:Tridion.ContentManager.IdentifiableObject"/> before it is actually saved.
            </remarks>
            <exception cref="T:Tridion.ContentManager.InvalidPropertyValueException">The <see cref="P:Tridion.ContentManager.IdentifiableObject.Title"/> property is not set or an empty string. This exception is also thrown if the length of the <see cref="P:Tridion.ContentManager.IdentifiableObject.Title"/> is exceeding 255 characters or it contains a backslash (\).</exception>
            <exception cref="T:Tridion.ContentManager.InvalidUriException">All properties that link to other objects will be validated. This exception will be thrown if
            <list type="bullet"><item><description>the <see cref="T:Tridion.ContentManager.TcmUri"/> contains a version</description></item>
            		<item><description>the <see cref="T:Tridion.ContentManager.ItemType"/> does not match the link type</description></item>
            		<item><description>the linked item does not exist</description></item>
            		<item><description>the Context Publication ID of the linked item does not match the current context</description></item>
            	</list>
            </exception>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.OnSaved(Tridion.ContentManager.Extensibility.Events.SaveEventArgs)">
            <summary>
            Called by <see cref="M:Tridion.ContentManager.Publishing.PublishTransaction.Save"/>, after going to the DAL.
            </summary>
            <param name="eventArgs">The Event data based on the method parameters.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.AssertValidContextPublication(Tridion.ContentManager.TcmUri)">
            <summary>
            Verifies that TcmUri specified in <paramref name="uri"/> is valid for the current context Repository.
            </summary>
            <param name="uri">The <see cref="T:Tridion.ContentManager.TcmUri"/> to verify.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.HasUsingItems(Tridion.ContentManager.UsingItemsFilter)">
            <summary>
            Determine if there are items linking to (i.e. "using") this object.
            </summary>
            <param name="filter">Can be used to filter the items based on conditions.
            See the filter parameter of <see cref="M:Tridion.ContentManager.IdentifiableObject.GetUsingItems(Tridion.ContentManager.UsingItemsFilter)"/> for a description of supported condition.</param>
            <returns>
              <c>true</c> if other object which meets the conditions specified in the filter (if any) are linking to this object.
            </returns>
            <seealso cref="M:Tridion.ContentManager.IdentifiableObject.GetUsingItems(Tridion.ContentManager.UsingItemsFilter)"/>
              
            <seealso cref="M:Tridion.ContentManager.IdentifiableObject.GetListUsingItems(Tridion.ContentManager.UsingItemsFilter)"/>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.PublishTransaction.GetPublishContextsFromCurrentState">
            <summary>
            Gets the PublishContext objects from the CurrentState
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.DeployerAction">
            <summary>
            Gets the action the deployer should take.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.Items">
            <summary>
            Gets a readonly collection of items that needs to be published or unpublished.
            </summary>
            <value>The collection of items that needs to be published or unpublished. Currently this is always one item.</value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.Information">
            <summary>
            Gets the information about this <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/>.
            </summary>
            <value>Information about the reason of a failed publish transaction.</value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.Priority">
            <summary>
            Gets the priority of this instance. It can be one of three values: low, normal or high. Transactions are executed according to this priority.
            </summary>
            <value>The priority of this instance.</value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.HasRenderFailures">
            <summary>
            Gets a value indicating whether one of the processed items has render failures.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.PublishContexts">
            <summary>
            Gets a readonly collection of <see cref="P:Tridion.ContentManager.Publishing.PublishTransaction.PublishContexts"/> that indicates where to publish/unpublish to.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.State">
            <summary>
            Gets or sets the state of this <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/>.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.StateChangeDateTime">
            <summary>
            Gets the date/time when the last state change occurred.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.Instruction">
            <summary>
            Gets the instruction of this <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/>.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.Creator">
            <summary>
            Gets to user who created this <see cref="T:Tridion.ContentManager.Publishing.PublishTransaction"/> by publishing item(s).
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.CurrentState">
            <summary>
            Gets the current state as a Data Object.
            </summary>
            <value>
            A Data Object reflecting the current state (i.e. including any changes made since the object was loaded).
            If the object's state has not been loaded yet, it will be Just-In-Time loaded when retrieving this property.
            </value>
            <remarks>
            This property's visibility is "protected internal": in this manner it can be used in this class and subclasses,
            but also from our WCF Web Service (to which we'll make internals visible).
            The property's type is refined in subclasses so that it reflects the associated Data Object type.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.PublishTransaction.LoadedState">
            <summary>
            Gets the last loaded state as a Data Object.
            </summary>
            <value>
            A Data Object reflecting the last loaded state.
            If the object's state has not been loaded yet, it will be Just-In-Time loaded when retrieving this property.
            </value>
            <remarks>
            The property's type is refined in subclasses so that it reflects the associated Data Object type.
            </remarks>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.ComWrapper.IRenderEngine">
            <summary>
            The COM interface for the <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderEngine"/> implementation.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.IRenderEngine.RenderPage(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String,System.String)">
            <summary>
            Renders the page according to the parameters found in the instruction parameter.
            </summary>
            <param name="userContext">The page is rendered by this user.</param>
            <param name="pageXml">The serialized xml of the page.</param>
            <param name="pageTemplateXml">The serialized xml of the page.</param>
            <param name="instruction">The instruction needed by the renderer.</param>
            <returns>The rendered page.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.IRenderEngine.RenderComponentPresenation(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String,System.String)">
            <summary>
            Renders the component presentation according to the parameters found in the instruction parameter.
            </summary>
            <param name="userContext">The component presentation is rendered by this user.</param>
            <param name="componentXml">The serialized xml of the component.</param>
            <param name="componentTemplateXml">The serialized xml of the component template.</param>
            <param name="instruction">The instruction needed by the renderer.</param>
            <returns>The rendered component presenation.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade">
            <summary>
            Com facade from the <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderEngine"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.RenderPage(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String,System.String)">
            <summary>
            Renders the page according to the parameters found in the instruction parameter.
            </summary>
            <param name="userContext">The page is rendered using this user context.</param>
            <param name="pageXml">The serialized xml of the page.</param>
            <param name="pageTemplateXml">The serialized xml of the page template.</param>
            <param name="instruction">The instruction needed by the renderer.</param>
            <returns>The rendered page.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.RenderComponentPresenation(Tridion.ContentManager.Interop.cm_sys.UserContext,System.String,System.String,System.String)">
            <summary>
            Renders the component presentation according to the parameters found in the instruction parameter.
            </summary>
            <param name="userContext">The component presenation is rendered using this user context.</param>
            <param name="componentXml">The serialized xml of the component.</param>
            <param name="componentTemplateXml">The serialized xml of the component template.</param>
            <param name="instruction">The instruction needed by the renderer.</param>
            <returns>The rendered component presenation.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.RenderItemWithTemplate(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.Template,System.String)">
            <summary>
            Renders an <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with a <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> and returns the result in the legacy format
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to render.</param>
            <param name="template">The <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> to render the <paramref name="item"/> with.</param>
            <param name="legacyRenderInstruction">The legacy render instruction.</param>
            <returns>The render output in legacy Xml format.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.RenderItemWithTemplate(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.Template,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Publishing.Rendering.RenderContext)">
            <summary>
            Renders an <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with a <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> and returns the result in the legacy format
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to render.</param>
            <param name="template">The <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> to render the <paramref name="item"/> with.</param>
            <param name="publishInstruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/>.</param>
            <param name="target">Render the <paramref name="item"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <param name="renderContext">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers. The renderContext can be null.</param>
            <returns>The render output in legacy Xml format.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.ParseInstruction(System.String,Tridion.ContentManager.Publishing.PublishInstruction@,Tridion.ContentManager.CommunicationManagement.PublicationTarget@,Tridion.ContentManager.Publishing.Rendering.RenderContext@,Tridion.ContentManager.Session)">
            <summary>
            Parse the legacy render instruction to a <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and a <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>
            </summary>
            <param name="legacyRenderInstruction">The legacy render instruction.</param>
            <param name="instruction">This <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> is modified with the one found in the legacy render instruction.</param>
            <param name="target">This <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> is modified with the one found in the legacy render instruction.</param>
            <param name="renderContext">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers. The renderContext can be null.</param>
            <param name="session"></param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.ParseRenderedItemIntoLegacyOutput(Tridion.ContentManager.Publishing.Rendering.RenderedItem,Tridion.ContentManager.Session)">
            <summary>
            Parses the <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> into the good old legacy Xml format.
            </summary>
            <param name="renderedItem">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> to parse.</param>
            <param name="session">The session that will be used to read the items.</param>
            <returns>The rendered output in Xml format.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.ParseComponentPresentationIntoLegacyOutput(Tridion.ContentManager.Publishing.Rendering.RenderedItem,System.Xml.XmlElement,System.Xml.XmlNamespaceManager,Tridion.ContentManager.Session)">
            <summary>
            Add a component presentation to the legacy Xml.
            </summary>
            <param name="renderedItem">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> that contains the component presentation.</param>
            <param name="componentPresenations">The reference to the new component presentation to.</param>
            <param name="nsmgr">The <see cref="T:System.Xml.XmlNamespaceManager"/> needed by the xpaths.</param>
            <param name="session"></param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.ParsePageIntoLegacyOutput(Tridion.ContentManager.CommunicationManagement.Page,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Parses the <see cref="T:Tridion.ContentManager.CommunicationManagement.Page"/> into the legacy Xml format.
            </summary>
            <param name="page">The page to parse.</param>
            <param name="renderedPage">Add the <see cref="T:Tridion.ContentManager.CommunicationManagement.Page"/> information to this reference of the page in the legacy Xml format.</param>
            <param name="nsmgr">The <see cref="T:System.Xml.XmlNamespaceManager"/> needed by the xpaths.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.ParseBinaryIntoLegacyOutput(Tridion.ContentManager.Publishing.Rendering.RenderedItem,System.Xml.XmlElement,System.Xml.XmlNamespaceManager,Tridion.ContentManager.Session)">
            <summary>
            Parses the binaries in the <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> into the old legacy Xml format.
            </summary>
            <param name="renderedItem">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderedItem"/> containing the binaries.</param>
            <param name="renderedMultimedias">Add the binary legacy to this rendered multimedias element.</param>
            <param name="nsmgr">The <see cref="T:System.Xml.XmlNamespaceManager"/> needed by the xpaths.</param>
            <param name="session"></param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.ComWrapper.RenderEngineFacade.GetContentFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Gets the content of a stream and returns it into a string.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to get the content from.</param>
            <param name="codePage">The codepage to use in the stream.</param>
            <returns>A string containg the content of the stream.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.RenderEngine">
            <summary>
            The engine that is responsible for rendering <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.Render(Tridion.ContentManager.Publishing.Resolving.ResolvedItem,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Publishing.Rendering.RenderContext)">
            <summary>
            Renders the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> according to the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="resolvedItem">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to render.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <param name="context">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers.</param>
            <returns>The result of the render action.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.Render(Tridion.ContentManager.Publishing.Resolving.ResolvedItem,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget)">
            <summary>
            Renders the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> according to the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="resolvedItem">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to render.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <returns>The result of the render action.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.Render(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.Template,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget,Tridion.ContentManager.Publishing.Rendering.RenderContext)">
            <summary>
            Renders the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with the <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> according to the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to render.</param>
            <param name="template">Render the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with this <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/></param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with the <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <param name="context">The <see cref="T:Tridion.ContentManager.Publishing.Rendering.RenderContext"/> that is transfered between renderers.</param>
            <returns>The result of the render action.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.Render(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.CommunicationManagement.Template,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget)">
            <summary>
            Renders the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with the <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> according to the <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> and the <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to render.</param>
            <param name="template">Render the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with this <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/></param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Render the <see cref="T:Tridion.ContentManager.IdentifiableObject"/> with the <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> for this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/></param>
            <returns>The result of the render action.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.IsFastTrackPublishingInstruction(Tridion.ContentManager.Publishing.PublishInstruction)">
            <summary>
            Determines whether the (Render) Instruction is provided by Fast Track Publishing.
            </summary>
            <param name="instruction">The Publish Instruction to test.</param>
            <returns><c>true</c> if the (Render) Instruction is provided by Fast Track Publishing</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.GetRenderersFromConfiguration(Tridion.ContentManager.Publishing.Resolving.ResolvedItem)">
            <summary>
            Gets the renderers from the configuration based on the item type and the type of the template.
            </summary>
            <param name="resolvedItem">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> used for getting the renderers from the configuration.</param>
            <returns>A collection of renderers.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.GetRenderInstances(Tridion.ContentManager.Publishing.Rendering.Configuration.Renderers)">
            <summary>
            Create an instance of each renderer.
            </summary>
            <param name="renderers">The list of renderers.</param>
            <returns>A list of renderers.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.RenderEngine.UpdateSessionForRendering(Tridion.ContentManager.Session,Tridion.ContentManager.Publishing.PublishInstruction,Tridion.ContentManager.CommunicationManagement.PublicationTarget)">
            <summary>
            Updates the <see cref="T:Tridion.ContentManager.Session"/> to support rendering of items that are checked out and/or are in workflow.
            </summary>
            <param name="session">The <see cref="T:Tridion.ContentManager.Session"/> to update.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.PublishInstruction"/> needed by the renderer.</param>
            <param name="target">Use the <see cref="T:Tridion.ContentManager.Workflow.ApprovalStatus"/> of this <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/> for rendering.</param>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.TcdlBinaryLink">
            <summary>
            Class to represent TCDL link to an item of type binary. Subclassed from <see cref="T:Tridion.ContentManager.Publishing.Rendering.TcdlLink"/>.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.TcdlLink">
            <summary>
            Base class to represent TCDL links
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Rendering.TcdlLink._addAnchor">
            <summary>
            Represents addAnchor attribute of a link
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Rendering.TcdlLink._destination">
            <summary>
            Represents destination attribute of a link
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Rendering.TcdlLink._linkAttributes">
            <summary>
            Represents custom attributes of a link
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Rendering.TcdlLink._linkText">
            <summary>
            Represents inner text of a link
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.Publishing.Rendering.TcdlLink._textOnFail">
            <summary>
            Represents textOnFailure attribute of a link
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlLink.#ctor(System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Base constructor
            </summary>
            <param name="addAnchor"> is a Boolean value that indicates if anchor must be added to output tag.</param>
            <param name="destination"> is a string that contains id of the item to link to.</param>
            <param name="linkAttributes"> is a string with attributes of the link.</param>
            <param name="linkText"> is a string that contains visible text of the link.</param>
            <param name="textOnFail"> is a Boolean value that contiains value for attribute textOnFailure.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlBinaryLink.#ctor(System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructs an object representing TSDL link with attribute type='Binary'
            </summary>
            <param name="addAnchor"> is a Boolean value that indicates if anchor must be added to output tag.</param>
            <param name="destination"> is a string that contains id of the item to link to.</param>
            <param name="linkAttributes"> is a string with attributes of the link.</param>
            <param name="linkText"> is a string that contains visible text of the link.</param>
            <param name="textOnFail"> is a Boolean value that contiains value for attribute textOnFailure.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlBinaryLink.ToString">
            <summary>
            Outputs the link as an XML element.
            </summary>
            <returns>String containing XML representation of the link.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.TcdlComponentLink">
            <summary>
            Class to represent TCDL link to an item of type Component. Subclassed from <see cref="T:Tridion.ContentManager.Publishing.Rendering.TcdlLink"/>.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlComponentLink.#ctor(System.Boolean,System.String,System.String,System.String,System.Boolean,System.String,Tridion.ContentManager.CommunicationManagement.Template)">
            <summary>
            Constructs an object representing TSDL link with attribute type='Component'
            </summary>
            <param name="addAnchor"> is a Boolean value that indicates if anchor must be added to output tag.</param>
            <param name="destination"> is a string that contains id of the item to link to.</param>
            <param name="linkAttributes"> is a string with attributes of the link.</param>
            <param name="linkText"> is a string that contains visible text of the link.</param>
            <param name="textOnFail"> is a Boolean value that contiains value for attribute textOnFailure.</param>
            <param name="origin"> is a sting that contiains value for attribute 'origin'.</param>
            <param name="template"> refers to <see cref="T:Tridion.ContentManager.CommunicationManagement.Template"/> on which component is based.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlComponentLink.ToString">
            <summary>
            Outputs the link as an XML element.
            </summary>
            <returns>String containing XML representation of the link.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Rendering.TcdlPageLink">
            <summary>
            Class to represent TCDL link to an item of type page. Subclassed from <see cref="T:Tridion.ContentManager.Publishing.Rendering.TcdlLink"/>.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlPageLink.#ctor(System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructs an object representing TSDL link with attribute type='Page'
            </summary>
            <param name="addAnchor"> is a Boolean value that indicates if anchor must be added to output tag.</param>
            <param name="destination"> is a string that contains id of the item to link to.</param>
            <param name="linkAttributes"> is a string with attributes of the link.</param>
            <param name="linkText"> is a string that contains visible text of the link.</param>
            <param name="textOnFail"> is a Boolean value that contiains value for attribute textOnFailure.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Rendering.TcdlPageLink.ToString">
            <summary>
            Outputs the link as an XML element.
            </summary>
            <returns>String containing XML representation of the link.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.ResolveInstruction">
            <summary>
            Represents the instructions needed for resolving.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> class.
            </summary>
            <remarks>
            This constructor has been deprecated. Please use <see cref="M:Tridion.ContentManager.Publishing.ResolveInstruction.#ctor(Tridion.ContentManager.Session)"/> instead and pass your current session.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> class.
            </summary>
            <param name="session">The session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.#ctor(Tridion.ContentManager.Session,Tridion.ContentManager.Publishing.ResolvePurpose)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> class, specifying the resolving purpose and
            limiting the allowed resolve purposes to that value.
            Creating a Resolve Instruction with this constructor effectively makes the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property read-only.
            </summary>
            <param name="session">The session in which the object should be created.</param>
            <param name="resolvePurpose">The only valid resolving purpose of this instruction</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.#ctor(Tridion.ContentManager.Data.Publishing.ResolveInstructionData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> class pre-loaded with a given Data Object.
            </summary>
            <param name="state">The state to pre-load this instance with.</param>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.CreateFromDataObject(Tridion.ContentManager.Data.Publishing.ResolveInstructionData,Tridion.ContentManager.Session,System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.ResolvePurpose})">
            <summary>
            Creates an instance of the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> class based on the actual type stored in the extension information of the data object.
            </summary>
            <param name="data">The data object to use as current state</param>
            <param name="session">The session in which the object should be created</param>
            <param name="allowedResolvePurposes">The allowed Resolve Purposes.</param>
            <returns>The newly created instance</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.CreateDataObject">
            <summary>
            Creates a new data object instance for initializing current state.
            The actual type of the data object corresponds to the enclosing business object.
            </summary>
            <returns>A data object instance</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates a <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> from its XML representation. 
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> is deserialized.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts this <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/> is serialized.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.SyncCurrentState">
            <summary>
            Ensures that the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.CurrentState"/> property is up-to-date.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.AssertValidPurpose(System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.ResolvePurpose},Tridion.ContentManager.Publishing.ResolvePurpose)">
            <summary>
            Asserts that the given resolve purpose is valid according to the given collection of allowed resolve purposes.
            </summary>
            <param name="allowedResolvePurposes">A collection of valid values for the <paramref name="resolvePurpose"/>. If this value is <c>null</c>, validation always succeeds.</param>
            <param name="resolvePurpose">A resolve purpose to test against the given collection of valid values.</param>
            <exception cref="T:Tridion.ContentManager.InvalidPropertyValueException">when the <paramref name="allowedResolvePurposes"/> is not <c>null</c> and does not contain <paramref name="resolvePurpose"/>.</exception>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.Initialize">
            <summary>
            Initializes this Resolve Instruction to its default values.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.SetExtensionXml">
            <summary>
            Rebuilds the XML representation of the extension information.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.ResolveInstruction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.Session">
            <summary>
            Gets or sets the session in which the object was created.
            </summary>
            <remarks>
            If the user tries to read this property and a Session has not been set, a new Session is established.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.CurrentState">
            <summary>
            Gets the current state as a data object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.IncludeComponentLinks">
            <summary>
            Gets or sets a value indicating whether component links should also be resolved.
            </summary>
            <remarks>
            If the value is <c>true</c>, component links in fields of components are checked and if a component holds
            a component link towards a component that is being resolved, that component gets resolved also, but only if it is published.
            </remarks>
            <example>
            Schema S has a Component Link field.
            Component B is based on schema S and has a component link that links to component A. Component B is published.
            Component A is based on another schema that has only a text field.
            If we resolve component A with <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.IncludeComponentLinks"/> set to <c>true</c>, then the result is that both A and B will be included in the resolved items, because B holds a component link to A and B is published.
            However, if we resolve component B with <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.IncludeComponentLinks"/> set to <c>true</c>, then the result is that only B will be included in the resolved items, because there are no components
            having a component link towards B.
            </example>
            <value>
            <c>true</c> if component links should also be resolved; otherwise, <c>false</c>. Default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.IncludeChildPublications">
            <summary>
            Gets or sets a value indicating whether to resolve items also from child publications.
            </summary>
            <value>
            <c>true</c> if items from child publications should also be resolved; otherwise, <c>false</c>. Default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.IncludeWorkflow">
            <summary>
            Gets or sets a value indicating whether the item is published from the user's work list.
            </summary>
            <value>
            If <c>true</c>, the current dynamic version is published from the work list 
            (but only if the work item has approval status equal or higher than the minimum value set on publication target);
            if <c>false</c>, the workflow is not considered and the latest full version is published. Default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.OnlyPublishedItems">
            <summary>
            Gets or sets a value indicating whether resolving should only return already published items.
            </summary>
            <value><c>true</c> if only published items should be resolved; otherwise, <c>false</c>. Default value is <c>false</c>.</value>
            <remarks>
                <para>
                    This property is obsolete and it has been replaced by <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/>. Please use that property instead.
                    Using <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> and <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.OnlyPublishedItems"/> together is not supported.
                </para>
                <para>
                    When resolving a component which is part of a dynamic component presentation, it will always be resolved regardless of the value of this property.
                </para>
            </remarks>
            <seealso cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.StructureResolveOption">
            <summary>
            Gets or sets a value indicating the option to include the resolved items and/or structure.
            </summary>
            <value>
            Choose <see cref="F:Tridion.ContentManager.Publishing.StructureResolveOption.OnlyItems"/> when only items should be resolved excluding the Structure. This is the default option.
            Choose <see cref="F:Tridion.ContentManager.Publishing.StructureResolveOption.OnlyStructure"/> when only the Structure should be resolved.
            Choose <see cref="F:Tridion.ContentManager.Publishing.StructureResolveOption.ItemsAndStructure"/> when Structure along with items should be resolved.
            </value>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose">
            <summary>
            Gets or sets a value indicating the purpose of the resolving operation.
            </summary>
            <remarks>
                <para>
                    This property supersedes the legacy property <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.OnlyPublishedItems"/>.
                </para>
                <para>
                    Default value is <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.Publish"/>.
                </para>
                <para>
                    This property affects the resolving operation, taking into account the publish state of the items being resolved. The only option that ignores
                    the publish state is <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.Publish"/>.
                    Furthermore, resolving with <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.UnPublish"/> will not resolve any items that can remain in their current
                    publish state after the resolved items will have been un-published.
                    For example, resolving a Page with <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.UnPublish"/> will not resolve its Structure Group, because there might be another Page (not being
                    resolved) that is contained in the same Structure Group. Additionally, the Structure Group can continue to remain published, even if it doesn't contain any published
                    Pages.
                    In the opposite example, resolving a Structure Group with <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.UnPublish"/> will also resolve any published Pages contained in it,
                    because these Pages cannot remain published if the Structure Group will be un-published.
                </para>
                <para>
                    Not all values of the <see cref="T:Tridion.ContentManager.Publishing.ResolvePurpose"/> enumeration are valid when the Resolve Instruction is used in combination with the
                    <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> class. The <see cref="T:Tridion.ContentManager.Publishing.PublishInstructionBase"/> class and its descendants can internally pose limitations
                    on the allowed values that the Purpose property can have. Please consult the documentation of <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction"/> for further information.
                </para>
            </remarks>
            <remarks></remarks>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.IsLegacy">
            <summary>
            Gets or sets a value indicating whether the Resolve Instruction is part of a legacy call.
            Some resolvers need to behave differently is this property is <c>true</c> in order to maintain
            backwards compatibility.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.AllowedResolvePurposes">
            <summary>
            Gets or sets a collection containing the valid values for the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property.
            If this property is <c>null</c>, there are no limitations on the possible values of the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property.
            If this property is not <c>null</c>, the possible valid values of the <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property are defined by this collection.
            </summary>
            <exception cref="T:Tridion.ContentManager.InvalidActionException">when trying to set this property while it was previously set to a non-<c>null</c> value. Once set, this property cannot change.</exception>
            <exception cref="T:Tridion.ContentManager.InvalidPropertyValueException">when trying to set this property to a value that would make the current <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> value invalid.</exception>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.ResolveInstruction.ExtensionXml">
            <summary>
            Gets additional properties of derived classes.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping">
            <summary>
            Represents a mapping between an <see cref="T:Tridion.ContentManager.IdentifiableObject"/> and its resolvers within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping.#ctor(Tridion.ContentManager.IdentifiableObject)">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> class.
            </summary>
            <param name="item">Get the item type from the <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping.ItemType">
            <summary>
            Gets and sets the item type of the resolve mapping.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping.Resolvers">
            <summary>
            Gets the resolvers for the specified item type.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings">
            <summary>
            Represents a collection of mappings between an <see cref="T:Tridion.ContentManager.IdentifiableObject"/> and its resolvers within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/>.
            </summary>
            <returns>A new <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/>.
            </summary>
            <param name="element">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to get.</param>
            <returns>An Object that acts as the key for the specified ResourceElement.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.Add(Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to the resolve mappings collection.
            </summary>
            <param name="resolveMapping">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to a collection of <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings"/>.
            </summary>
            <param name="resource">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.Remove(Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping)">
            <summary>
            Removes a <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> from the collection.
            </summary>
            <param name="resolveMapping">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to remove.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> at the specified index location.
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to remove.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.CollectionType">
            <summary>
            Gets the type of the resolve mappings collection.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> at the specified index location. 
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> to get.</param>
            <returns>A <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolveMapping"/> at the specified index.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver">
            <summary>
            Represents a resolver within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> class.
            </summary>
            <param name="type">The class name responsible for the resolving.</param>
            <param name="assembly">The name of the assembly.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver.Type">
            <summary>
            Gets and sets the type of the class responsible for the resolving.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver.Assembly">
            <summary>
            Gets and sets the assembly of that contains the resolver
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers">
            <summary>
            Represents a collection of resolvers within a configuration file.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/>.
            </summary>
            <returns>A new <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/>.
            </summary>
            <param name="resolver">Get this <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/>.</param>
            <returns>An Object that acts as the key for the specified <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.Add(Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers"/> to a collection of <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers"/>.
            </summary>
            <param name="resolver">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> to a collection of <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers"/>.
            </summary>
            <param name="resolver">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> to add.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.Remove(Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver)">
            <summary>
            Removes a <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers"/> from the collection of <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers"/>.
            </summary>
            <param name="resolver">The <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> to remove.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> at the specified index location.
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> to remove.</param>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.CollectionType">
            <summary>
            Gets the type of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers"/> collection.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolvers.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> at the specified index location. 
            </summary>
            <param name="index">The index location of the <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> to get.</param>
            <returns>A <see cref="T:Tridion.ContentManager.Publishing.Resolving.Configuration.Resolver"/> at the specified index.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolvingConfiguration">
            <summary>
            Represents the resolving section within a configuration file.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolvingConfiguration.Mappings">
            <summary>
            Gets and sets the resolving mappings.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.Configuration.ResolvingConfiguration.SectionName">
            <summary>
            Use this section name to get the resolving configuration from the <see cref="T:System.Configuration.ConfigurationManager"/>
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.ResolveEngine">
            <summary>
            The engine that is responsible for resolving <see cref="T:Tridion.ContentManager.IdentifiableObject"/>s.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolveItem(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Publishing.PublishContext)">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/> to be (un-/re-)published to given <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> if an (un-/re-)publish action is performed on this item.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.ResolveInstruction"/>.</param>
            <param name="context">The <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> the resolving must be done. See remarks.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.Resolving.ResolvedItem"/>.</returns>
            <remarks>
            <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> objects should not be created manually - instead, one of the <c>ResolvePublishContext</c> methods defined in this class should be used.
            Those methods properly resolve all publishing contexts necessary for particular resolving operation and return them as a result. 
            If <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> is created manually, the collection of resolved items can be incorrect or incomplete.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget})">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> to where the the given item should be (un-/re-)published based on the list of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.RenderInstruction"/>.</param>
            <param name="publicationTargets">A enumeration of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(Tridion.ContentManager.IdentifiableObject,Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType})">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> to where the the given item should be (un-/re-)published based on the list of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/>.
            </summary>
            <param name="item">The <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.RenderInstruction"/>.</param>
            <param name="targetTypes">A enumeration of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/>.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolveItems(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.Publishing.PublishContext})">
            <summary>
            Evaluates the Resolved Items that will be (un-/re-)published to the given Publish Contexts if
            a (un-/re-)publish action is performed on the given Identifiable Objects. The list of Resolved Items is then
            stored per Publish Context in the <see cref="P:Tridion.ContentManager.Publishing.PublishContext.ResolvedItems"/> property.
            </summary>
            <param name="items">The list of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve. All items must be from the same publication.</param>
            <param name="instruction">The Resolve Instruction.</param>
            <param name="contexts">The Publish Contexts in which resolving must be done. See remarks.</param>
            <remarks>
            <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> objects should not be created manually - instead, one of the <c>ResolvePublishContext</c> methods should always be used before.
            Those methods properly resolve all publishing contexts necessary for particular resolving operation and return them as a result. 
            If <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> is created manually, the collection of resolved items can be incorrect or incomplete.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.PublicationTarget})">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> to where the the given item should be (un-/re-)published based on the list of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.
            </summary>
            <param name="items">The list of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve. All items must be from the same publication.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.RenderInstruction"/>.</param>
            <param name="publicationTargets">A enumeration of <see cref="T:Tridion.ContentManager.CommunicationManagement.PublicationTarget"/>.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.ResolvePublishContext(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject},Tridion.ContentManager.Publishing.ResolveInstruction,System.Collections.Generic.IEnumerable{Tridion.ContentManager.CommunicationManagement.TargetType})">
            <summary>
            Gets a list of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/> to where the the given item should be (un-/re-)published based on the list of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/>.
            </summary>
            <param name="items">The list of <see cref="T:Tridion.ContentManager.IdentifiableObject"/> to resolve. All items must be from the same publication.</param>
            <param name="instruction">The <see cref="T:Tridion.ContentManager.Publishing.RenderInstruction"/>.</param>
            <param name="targetTypes">A enumeration of <see cref="T:Tridion.ContentManager.CommunicationManagement.TargetType"/>.</param>
            <returns>A collection of <see cref="T:Tridion.ContentManager.Publishing.PublishContext"/>.</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.ResolveEngine.GetResolversFromConfiguration(System.Collections.Generic.IEnumerable{Tridion.ContentManager.IdentifiableObject})">
            <summary>
            Gets the resolvers from the configuration that can handle the given items.
            Configuration specifies a list of item types and for every supported item type a list of resolvers that can handle these types.
            Both item types and resolvers are specified by the <see cref="P:System.Type.FullName"/> of their .NET Types.
            </summary>
            <param name="items">Get the resolvers for this list of <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.</param>
            <returns>A collection of resolvers paired with the item types that they support.</returns>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.Resolving.StructureGroupResolver">
            <summary>
            Represent the resolver for Structure Groups.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.StructureGroupResolver.IncludeResolvedItem(Tridion.ContentManager.Publishing.ResolveInstruction,Tridion.ContentManager.Data.Publishing.ResolvedItemData)">
            <summary>
            Specified additional business rules to control if a Resolved Item should be included in the Resolved Items that this Resolver returns.
            </summary>
            <remarks>
            This implementation excludes Components if the Resolve Instruction specified that only items that were already published should be included in the results.
            </remarks>
            <param name="instruction">The Resolve Instruction</param>
            <param name="resolvedItemData">The Resolved Item</param>
            <returns><c>true</c> if the given Resolved Item should be included in the results, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.Resolving.StructureGroupResolver.GetResolveLogMessage">
            <summary>
            Gets a string suitable for formatting the Resolver's log message.
            </summary>
            <remarks>
            The formatting string should define two placeholders: the first should be for the ids of the items and the second one for the time resolving lasted.
            </remarks>
            <returns>A string suitable for formatting the Resolver's log message.</returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.Resolving.StructureGroupResolver.IsItemResolvingNeededForStructureResolvingSupport">
            <summary>
            Gets a value indicating whether the resolver needs to resolve items first to be able to resolve structure information.
            </summary>
            <value>returns <c>false</c>, because StructureGroupResolver is able to resolve structure information directly, and does not need to resolve the items first.</value>
        </member>
        <member name="T:Tridion.ContentManager.Publishing.UnPublishInstruction">
            <summary>
            Represents the instructions needed for un-publishing an <see cref="T:Tridion.ContentManager.IdentifiableObject"/>.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.UnPublishInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.UnPublishInstruction"/> class. 
            </summary>
            <remarks>
            This constructor has been deprecated. Please use <see cref="M:Tridion.ContentManager.Publishing.UnPublishInstruction.#ctor(Tridion.ContentManager.Session)"/> instead and pass your current session.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.UnPublishInstruction.#ctor(Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.UnPublishInstruction"/> class. 
            </summary>
            <param name="session">
            The session in which the object should be created.
            </param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.UnPublishInstruction.#ctor(Tridion.ContentManager.Data.Publishing.UnPublishInstructionData,Tridion.ContentManager.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:Tridion.ContentManager.Publishing.UnPublishInstruction"/> class pre-loaded with a given Data Object.
            </summary>
            <param name="state">The state to pre-load this instance with.</param>
            <param name="session">The Session in which the object should be created.</param>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.UnPublishInstruction.CreateDataObject">
            <summary>
            Creates a new data object instance for initializing current state.
            The actual type of the data object corresponds to the enclosing business object.
            </summary>
            <returns>A data object instance</returns>
        </member>
        <member name="M:Tridion.ContentManager.Publishing.UnPublishInstruction.GetAllowedResolvePurposes">
            <summary>
            Gets a collection containing the possible valid resolving purposes for this instruction.
            The <see cref="P:Tridion.ContentManager.Publishing.ResolveInstruction.Purpose"/> property
            of the <see cref="P:Tridion.ContentManager.Publishing.PublishInstructionBase.ResolveInstruction"/> contained in this object will be limited to these values.
            </summary>
            <returns>A collection containing the possible valid resolving purposes for this instruction, namely
            <see cref="F:Tridion.ContentManager.Publishing.ResolvePurpose.UnPublish"/>
            </returns>
        </member>
        <member name="P:Tridion.ContentManager.Publishing.UnPublishInstruction.CurrentState">
            <summary>
            Gets the current state as a data object.
            </summary>
        </member>
    </members>
</doc>
